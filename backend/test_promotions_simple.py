import os
import sys
import django
import time
from django.db import transaction
from django.db.utils import OperationalError
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from api.models import User, Address, Category, SizeOption, AddOn, MenuItem, Promotion, DeliveryZone, Order, OrderItem

def print_step(step_number, title):
    print(f"\nüìã {step_number}. {title}")
    print("=" * 50)

def print_result(success, message):
    if success:
        print(f"‚úÖ {message}")
    else:
        print(f"‚ùå {message}")

def retry_on_db_lock(func, max_retries=3, delay=2):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    for attempt in range(max_retries):
        try:
            return func()
        except OperationalError as e:
            if "database is locked" in str(e) and attempt < max_retries - 1:
                print(f"‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                time.sleep(delay)
                continue
            else:
                raise e

def main():
    print("–ü–†–û–í–ï–†–ö–ê –ê–ö–¶–ò–ô –ò –ö–ê–°–¢–û–ú–ò–ó–ê–¶–ò–ò (–£–ü–†–û–©–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø)")
    print("=" * 80)
    
    try:
        # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        print_step(1, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, created = retry_on_db_lock(lambda: User.objects.get_or_create(
            telegram_id=908758842,
            defaults={'username': 'test_user', 'first_name': '–¢–µ—Å—Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}
        ))
        print_result(True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.first_name}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        delivery_zone, created = retry_on_db_lock(lambda: DeliveryZone.objects.get_or_create(
            city='–ë—É—Ö–∞—Ä–∞',
            name='–ë—É—Ö–∞—Ä–∞ –¶–µ–Ω—Ç—Ä',
            defaults={
                'center_latitude': 39.768100,
                'center_longitude': 64.455600,
                'radius_km': 5.0,
                'delivery_fee': 5000.00,
                'min_order_amount': 50000.00,
                'is_active': True
            }
        ))
        print_result(True, f"–ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–∑–¥–∞–Ω–∞: {delivery_zone.name}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
        address, created = retry_on_db_lock(lambda: Address.objects.get_or_create(
            user=user,
            street='–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞',
            house_number='10',
            city='–ë—É—Ö–∞—Ä–∞',
            defaults={
                'latitude': 39.768100,
                'longitude': 64.455600,
                'phone_number': '+998901234567',
                'is_primary': True
            }
        ))
        print_result(True, f"–ê–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω: {address.street}, {address.house_number}, {address.city}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        category, created = retry_on_db_lock(lambda: Category.objects.get_or_create(
            name='–ü–∏—Ü—Ü–∞',
            defaults={'description': '–í–∫—É—Å–Ω—ã–µ –ø–∏—Ü—Ü—ã'}
        ))
        print_result(True, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {category.name}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
        small_size, created = retry_on_db_lock(lambda: SizeOption.objects.get_or_create(
            name='–ú–∞–ª–µ–Ω—å–∫–∞—è',
            defaults={
                'price_modifier': 0,
                'description': '25 —Å–º, 6 –∫—É—Å–æ—á–∫–æ–≤',
                'is_active': True
            }
        ))
        
        large_size, created = retry_on_db_lock(lambda: SizeOption.objects.get_or_create(
            name='–ë–æ–ª—å—à–∞—è',
            defaults={
                'price_modifier': 20000,
                'description': '35 —Å–º, 8 –∫—É—Å–æ—á–∫–æ–≤',
                'is_active': True
            }
        ))
        print_result(True, f"–†–∞–∑–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã: {small_size.name}, {large_size.name}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
        ketchup, created = retry_on_db_lock(lambda: AddOn.objects.get_or_create(
            name='–ö–µ—Ç—á—É–ø',
            defaults={
                'price': 2000,
                'category': category,
                'is_active': True
            }
        ))
        
        cheese_sauce, created = retry_on_db_lock(lambda: AddOn.objects.get_or_create(
            name='–°—ã—Ä–Ω—ã–π —Å–æ—É—Å',
            defaults={
                'price': 3000,
                'category': category,
                'is_active': True
            }
        ))
        print_result(True, f"–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã: {ketchup.name}, {cheese_sauce.name}")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞
        menu_item, created = retry_on_db_lock(lambda: MenuItem.objects.get_or_create(
            name='–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
            defaults={
                'description': '–í–∫—É—Å–Ω–∞—è –ø–∏—Ü—Ü–∞',
                'price': 50000,
                'category': category,
                'is_hit': True,
                'is_new': True,
                'priority': 1
            }
        ))
        print_result(True, f"–ë–ª—é–¥–æ —Å–æ–∑–¥–∞–Ω–æ: {menu_item.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {menu_item.priority})")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ü–∏–π
        now = datetime.now()
        
        promo_percent, created = retry_on_db_lock(lambda: Promotion.objects.get_or_create(
            name='–°–∫–∏–¥–∫–∞ 10%',
            defaults={
                'description': '10% –Ω–∞ –≤—Å—ë',
                'discount_type': 'PERCENT',
                'discount_value': 10,
                'max_discount': 15000,
                'max_uses': 100,
                'valid_from': now - timedelta(days=1),
                'valid_to': now + timedelta(days=1),
                'is_active': True
            }
        ))
        
        promo_free_delivery, created = retry_on_db_lock(lambda: Promotion.objects.get_or_create(
            name='–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
            defaults={
                'description': '–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 100000',
                'discount_type': 'FREE_DELIVERY',
                'discount_value': 0,
                'min_order_amount': 100000,
                'valid_from': now - timedelta(days=1),
                'valid_to': now + timedelta(days=1),
                'is_active': True
            }
        ))
        
        promo_free_addon, created = retry_on_db_lock(lambda: Promotion.objects.get_or_create(
            name='–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ—Ç—á—É–ø',
            defaults={
                'description': '–ö–µ—Ç—á—É–ø –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∫ –ø–∏—Ü—Ü–µ',
                'discount_type': 'FREE_ITEM',
                'discount_value': 0,
                'valid_from': now - timedelta(days=1),
                'valid_to': now + timedelta(days=1),
                'is_active': True,
                'free_addon': ketchup
            }
        ))
        
        print_result(True, f"–ê–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: {promo_percent.name}, {promo_free_delivery.name}, {promo_free_addon.name}")
        print_result(True, "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
        print_step(2, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ö–∏—Ç–æ–≤ –∏ –Ω–æ–≤–∏–Ω–æ–∫")
        
        hit_items = retry_on_db_lock(lambda: MenuItem.objects.filter(is_hit=True).order_by('priority', '-created_at'))
        print_result(True, f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ is_hit —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {hit_items.count()} –±–ª—é–¥")
        
        new_items = retry_on_db_lock(lambda: MenuItem.objects.filter(is_new=True).order_by('priority', '-created_at'))
        print_result(True, f"–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ is_new —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {new_items.count()} –±–ª—é–¥")
        
        # 3. –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ Django ORM
        print_step(3, "–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤ —á–µ—Ä–µ–∑ Django ORM")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –Ω–∞–ø—Ä—è–º—É—é
        order = retry_on_db_lock(lambda: Order.objects.create(
            user=user,
            address=address,
            total_price=50000,
            status='pending'
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä –≤ –∑–∞–∫–∞–∑
        order_item = retry_on_db_lock(lambda: OrderItem.objects.create(
            order=order,
            menu_item=menu_item,
            quantity=1,
            size_option=small_size
        ))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
        retry_on_db_lock(lambda: order_item.add_ons.add(ketchup))
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∞–∫—Ü–∏—é
        order.promotion = promo_percent
        order.save()
        order.apply_promotion()
        
        print_result(True, f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ID {order.id}, —Å–∫–∏–¥–∫–∞: {order.discounted_total}")
        
        # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
        print_step(4, "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∞–∫—Ü–∏–π")
        
        promo_percent.refresh_from_db()
        print_result(promo_percent.usage_count > 0, f"–°—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π –∞–∫—Ü–∏–∏ '{promo_percent.name}': {promo_percent.usage_count}")
        
        # 5. –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–∫—Ü–∏–π
        print_step(5, "–¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∞–∫—Ü–∏–π")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∞–∫—Ü–∏–π
        print_result(promo_percent.is_valid(), f"–ê–∫—Ü–∏—è '{promo_percent.name}' –≤–∞–ª–∏–¥–Ω–∞")
        print_result(promo_free_delivery.is_valid(), f"–ê–∫—Ü–∏—è '{promo_free_delivery.name}' –≤–∞–ª–∏–¥–Ω–∞")
        print_result(promo_free_addon.is_valid(), f"–ê–∫—Ü–∏—è '{promo_free_addon.name}' –≤–∞–ª–∏–¥–Ω–∞")
        
        # 6. –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫
        print_step(6, "–¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å–∫–∏–¥–æ–∫")
        
        order_total = 100000
        discount_amount, delivery_fee = promo_percent.calculate_discount(order_total, 5000)
        print_result(discount_amount > 0, f"–°–∫–∏–¥–∫–∞ —Ä–∞—Å—Å—á–∏—Ç–∞–Ω–∞: {discount_amount} UZS")
        
        # 7. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
        print_step(7, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞")
        print_result(True, "–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")
        print_result(True, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ. –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ.")
        
    except Exception as e:
        print_result(False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 