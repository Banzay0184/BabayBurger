#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è StreetBurger Mini App —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
–ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–¥ —Ç–µ–∫—É—â—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É API
"""

import requests
import json
import time
import random
from datetime import datetime

class StreetBurgerClientTestFixed:
    def __init__(self, base_url="http://localhost:8000"):
        self.base_url = base_url
        self.session = requests.Session()
        self.user_data = None
        self.test_results = []
        
    def log_test(self, test_name, status, message=""):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–∞"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        status_icon = "‚úÖ" if status else "‚ùå"
        result = f"{timestamp} {status_icon} {test_name}"
        if message:
            result += f" - {message}"
        print(result)
        self.test_results.append({
            "test": test_name,
            "status": status,
            "message": message,
            "timestamp": timestamp
        })
    
    def test_auth_endpoint(self):
        """–¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"""
        print("\nüîê –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
        
        try:
            response = self.session.get(f"{self.base_url}/api/auth/")
            
            if response.status_code == 200:
                data = response.json()
                self.log_test("Endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", True, f"–°—Ç–∞—Ç—É—Å: {data.get('status', 'OK')}")
                return True
            else:
                self.log_test("Endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Endpoint –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_get_menu(self):
        """–¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é"""
        print("\nüçî –¢–ï–°–¢ 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é")
        
        try:
            response = self.session.get(f"{self.base_url}/api/menu/")
            
            if response.status_code == 200:
                menu_data = response.json()
                categories = menu_data.get("categories", [])
                items = menu_data.get("items", [])
                
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é", True, f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}, –ë–ª—é–¥: {len(items)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ö–∏—Ç–æ–≤ –∏ –Ω–æ–≤–∏–Ω–æ–∫
                hits = [item for item in items if item.get("is_hit")]
                news = [item for item in items if item.get("is_new")]
                
                self.log_test("–•–∏—Ç—ã –ø—Ä–æ–¥–∞–∂", len(hits) > 0, f"–ù–∞–π–¥–µ–Ω–æ —Ö–∏—Ç–æ–≤: {len(hits)}")
                self.log_test("–ù–æ–≤–∏–Ω–∫–∏", len(news) > 0, f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–∏–Ω–æ–∫: {len(news)}")
                
                return True
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–Ω—é", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_get_categories(self):
        """–¢–µ—Å—Ç 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
        print("\nüìÇ –¢–ï–°–¢ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        
        try:
            response = self.session.get(f"{self.base_url}/api/categories/")
            
            if response.status_code == 200:
                categories = response.json()
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", True, f"–ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
                category_names = [cat.get("name", "").lower() for cat in categories]
                expected_categories = ["–±—É—Ä–≥–µ—Ä", "–ø–∏—Ü—Ü–∞", "–Ω–∞–ø–∏—Ç–æ–∫", "–¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ"]
                
                for expected in expected_categories:
                    found = any(expected in name for name in category_names)
                    self.log_test(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{expected}'", found)
                
                return True
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_get_addons(self):
        """–¢–µ—Å—Ç 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π"""
        print("\nü•§ –¢–ï–°–¢ 4: –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π")
        
        try:
            response = self.session.get(f"{self.base_url}/api/add-ons/")
            
            if response.status_code == 200:
                addons = response.json()
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π", True, f"–î–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {len(addons)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
                addon_names = [addon.get("name", "").lower() for addon in addons]
                expected_addons = ["—Å–æ—É—Å", "–Ω–∞–ø–∏—Ç–æ–∫", "–∫–∞—Ä—Ç–æ—à–∫–∞", "—Å—ã—Ä"]
                
                for expected in expected_addons:
                    found = any(expected in name for name in addon_names)
                    self.log_test(f"–î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ '{expected}'", found)
                
                return True
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_get_promotions(self):
        """–¢–µ—Å—Ç 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ü–∏–π"""
        print("\nüéâ –¢–ï–°–¢ 5: –ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ü–∏–π")
        
        try:
            response = self.session.get(f"{self.base_url}/api/promotions/")
            
            if response.status_code == 200:
                promotions = response.json()
                active_promotions = [p for p in promotions if p.get("is_active")]
                
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ü–∏–π", True, f"–í—Å–µ–≥–æ –∞–∫—Ü–∏–π: {len(promotions)}, –ê–∫—Ç–∏–≤–Ω—ã—Ö: {len(active_promotions)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø—ã –∞–∫—Ü–∏–π
                discount_types = set(p.get("discount_type") for p in active_promotions)
                expected_types = ["PERCENT", "FIXED_AMOUNT", "FREE_DELIVERY", "FREE_ITEM"]
                
                for expected in expected_types:
                    found = expected in discount_types
                    self.log_test(f"–¢–∏–ø –∞–∫—Ü–∏–∏ '{expected}'", found)
                
                return True
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ü–∏–π", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ü–∏–π", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_delivery_zones(self):
        """–¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏"""
        print("\nüöö –¢–ï–°–¢ 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏")
        
        try:
            response = self.session.get(f"{self.base_url}/api/delivery-zones/")
            
            if response.status_code == 200:
                zones = response.json()
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏", True, f"–ó–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏: {len(zones)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã –¥–ª—è –ë—É—Ö–∞—Ä—ã
                bukhara_zones = [zone for zone in zones if zone.get("city", "").lower() == "–±—É—Ö–∞—Ä–∞"]
                self.log_test("–ó–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ –ë—É—Ö–∞—Ä–µ", len(bukhara_zones) > 0, f"–ù–∞–π–¥–µ–Ω–æ –∑–æ–Ω: {len(bukhara_zones)}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–æ–Ω—ã
                active_zones = [zone for zone in zones if zone.get("is_active")]
                self.log_test("–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏", len(active_zones) > 0, f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω: {len(active_zones)}")
                
                return True
            else:
                self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_geocode_endpoint(self):
        """–¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        print("\nüìç –¢–ï–°–¢ 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º query
            response = self.session.get(f"{self.base_url}/api/geocode/?query=–ë—É—Ö–∞—Ä–∞")
            
            if response.status_code == 200:
                self.log_test("Endpoint –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è", True, "–î–æ—Å—Ç—É–ø–µ–Ω")
                return True
            elif response.status_code == 400:
                # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ query
                self.log_test("Endpoint –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è", True, "–¢—Ä–µ–±—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä query (–æ–∂–∏–¥–∞–µ–º–æ)")
                return True
            else:
                self.log_test("Endpoint –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Endpoint –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_orders_endpoint(self):
        """–¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∑–∞–∫–∞–∑–æ–≤"""
        print("\nüõí –¢–ï–°–¢ 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∑–∞–∫–∞–∑–æ–≤")
        
        try:
            response = self.session.get(f"{self.base_url}/api/orders/")
            
            if response.status_code == 200:
                orders = response.json()
                self.log_test("Endpoint –∑–∞–∫–∞–∑–æ–≤", True, f"–ó–∞–∫–∞–∑–æ–≤: {len(orders)}")
                return True
            elif response.status_code == 400:
                # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.log_test("Endpoint –∑–∞–∫–∞–∑–æ–≤", True, "–¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–æ–∂–∏–¥–∞–µ–º–æ)")
                return True
            else:
                self.log_test("Endpoint –∑–∞–∫–∞–∑–æ–≤", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Endpoint –∑–∞–∫–∞–∑–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_addresses_endpoint(self):
        """–¢–µ—Å—Ç 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∞–¥—Ä–µ—Å–æ–≤"""
        print("\nüè† –¢–ï–°–¢ 9: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint –∞–¥—Ä–µ—Å–æ–≤")
        
        try:
            response = self.session.get(f"{self.base_url}/api/addresses/")
            
            if response.status_code == 200:
                addresses = response.json()
                self.log_test("Endpoint –∞–¥—Ä–µ—Å–æ–≤", True, f"–ê–¥—Ä–µ—Å–æ–≤: {len(addresses)}")
                return True
            elif response.status_code == 400:
                # –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ –±–µ–∑ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
                self.log_test("Endpoint –∞–¥—Ä–µ—Å–æ–≤", True, "–¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é (–æ–∂–∏–¥–∞–µ–º–æ)")
                return True
            else:
                self.log_test("Endpoint –∞–¥—Ä–µ—Å–æ–≤", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Endpoint –∞–¥—Ä–µ—Å–æ–≤", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_webhook_endpoint(self):
        """–¢–µ—Å—Ç 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint webhook"""
        print("\nü§ñ –¢–ï–°–¢ 10: –ü—Ä–æ–≤–µ—Ä–∫–∞ endpoint webhook")
        
        try:
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º GET –∑–∞–ø—Ä–æ—Å –∫ webhook
            response = self.session.get(f"{self.base_url}/api/webhook/")
            
            if response.status_code in [200, 405]:  # 405 - Method Not Allowed –¥–ª—è GET
                self.log_test("Endpoint webhook", True, "–î–æ—Å—Ç—É–ø–µ–Ω")
                return True
            else:
                self.log_test("Endpoint webhook", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
                return False
                
        except Exception as e:
            self.log_test("Endpoint webhook", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_performance(self):
        """–¢–µ—Å—Ç 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
        print("\n‚ö° –¢–ï–°–¢ 11: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        try:
            start_time = time.time()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é
            response = self.session.get(f"{self.base_url}/api/menu/")
            
            menu_time = time.time() - start_time
            
            if response.status_code == 200:
                self.log_test("–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é", menu_time < 2.0, f"–í—Ä–µ–º—è: {menu_time:.2f}—Å")
            else:
                self.log_test("–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ–Ω—é", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            start_time = time.time()
            response = self.session.get(f"{self.base_url}/api/categories/")
            categories_time = time.time() - start_time
            
            if response.status_code == 200:
                self.log_test("–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", categories_time < 1.0, f"–í—Ä–µ–º—è: {categories_time:.2f}—Å")
            else:
                self.log_test("–°–∫–æ—Ä–æ—Å—Ç—å –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π", False, f"–û—à–∏–±–∫–∞ {response.status_code}")
            
            return True
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def test_api_structure(self):
        """–¢–µ—Å—Ç 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API"""
        print("\nüèóÔ∏è  –¢–ï–°–¢ 12: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints
            endpoints = [
                ("auth", "/api/auth/"),
                ("menu", "/api/menu/"),
                ("categories", "/api/categories/"),
                ("add-ons", "/api/add-ons/"),
                ("promotions", "/api/promotions/"),
                ("delivery-zones", "/api/delivery-zones/"),
                ("orders", "/api/orders/"),
                ("addresses", "/api/addresses/"),
                ("webhook", "/api/webhook/"),
            ]
            
            available_endpoints = 0
            
            for name, endpoint in endpoints:
                try:
                    response = self.session.get(f"{self.base_url}{endpoint}")
                    if response.status_code in [200, 400, 405]:  # 400/405 - –æ–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏
                        self.log_test(f"Endpoint {name}", True, f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                        available_endpoints += 1
                    else:
                        self.log_test(f"Endpoint {name}", False, f"–°—Ç–∞—Ç—É—Å: {response.status_code}")
                except Exception as e:
                    self.log_test(f"Endpoint {name}", False, f"–û—à–∏–±–∫–∞: {str(e)}")
            
            self.log_test("–û–±—â–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API", available_endpoints >= 6, f"–î–æ—Å—Ç—É–ø–Ω–æ: {available_endpoints}/{len(endpoints)}")
            
            return True
                
        except Exception as e:
            self.log_test("–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API", False, f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {str(e)}")
            return False
    
    def run_all_tests(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø STREETBURGER MINI APP")
        print("=" * 70)
        
        tests = [
            self.test_auth_endpoint,
            self.test_get_menu,
            self.test_get_categories,
            self.test_get_addons,
            self.test_get_promotions,
            self.test_delivery_zones,
            self.test_geocode_endpoint,
            self.test_orders_endpoint,
            self.test_addresses_endpoint,
            self.test_webhook_endpoint,
            self.test_performance,
            self.test_api_structure
        ]
        
        passed = 0
        total = len(tests)
        
        for test in tests:
            try:
                if test():
                    passed += 1
            except Exception as e:
                self.log_test(test.__name__, False, f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}")
        
        # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        print("\n" + "=" * 70)
        print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print("=" * 70)
        
        print(f"‚úÖ –ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total}")
        print(f"‚ùå –ü—Ä–æ–≤–∞–ª–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {total - passed}")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(passed/total)*100:.1f}%")
        
        # –í—ã–≤–æ–¥–∏–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìã –î–ï–¢–ê–õ–¨–ù–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print("-" * 70)
        
        for result in self.test_results:
            status_icon = "‚úÖ" if result["status"] else "‚ùå"
            print(f"{status_icon} {result['test']} - {result['message']}")
        
        return passed == total
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        report = {
            "project": "StreetBurger Mini App (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)",
            "test_date": datetime.now().isoformat(),
            "base_url": self.base_url,
            "total_tests": len(self.test_results),
            "passed_tests": len([r for r in self.test_results if r["status"]]),
            "failed_tests": len([r for r in self.test_results if not r["status"]]),
            "results": self.test_results
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç –≤ —Ñ–∞–π–ª
        with open("client_test_report_fixed.json", "w", encoding="utf-8") as f:
            json.dump(report, f, ensure_ascii=False, indent=2)
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: client_test_report_fixed.json")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    import sys
    
    # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    base_url = "http://localhost:8000"
    if len(sys.argv) > 1:
        base_url = sys.argv[1]
    
    print(f"üéØ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ StreetBurger Mini App")
    print(f"üåê –ë–∞–∑–æ–≤—ã–π URL: {base_url}")
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ç–µ—Å—Ç–µ—Ä–∞
    tester = StreetBurgerClientTestFixed(base_url)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ —Ç–µ—Å—Ç—ã
    success = tester.run_all_tests()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
    tester.generate_report()
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞
    if success:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        sys.exit(0)
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
        sys.exit(1)


if __name__ == "__main__":
    main() 