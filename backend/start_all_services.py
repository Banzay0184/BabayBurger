#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
"""

import os
import sys
import subprocess
import time
import signal
import threading
from pathlib import Path

class ServiceManager:
    def __init__(self):
        self.processes = {}
        self.running = True
        
    def start_django(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Django —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            process = subprocess.Popen([
                sys.executable, 'manage.py', 'runserver', '0.0.0.0:8000'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            self.processes['django'] = process
            print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Django: {e}")
            return False
    
    def start_celery(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Celery worker"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Celery worker...")
        try:
            process = subprocess.Popen([
                sys.executable, '-m', 'celery', '-A', 'config', 'worker', '--loglevel=info'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
            
            self.processes['celery'] = process
            print("‚úÖ Celery worker –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Celery: {e}")
            return False
    
    def check_ngrok(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç ngrok"""
        print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ngrok...")
        try:
            import requests
            response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
            if response.status_code == 200:
                tunnels = response.json()['tunnels']
                if tunnels:
                    ngrok_url = tunnels[0]['public_url']
                    print(f"‚úÖ Ngrok —Ä–∞–±–æ—Ç–∞–µ—Ç: {ngrok_url}")
                    return True
                else:
                    print("‚ö†Ô∏è  Ngrok –∑–∞–ø—É—â–µ–Ω, –Ω–æ —Ç—É–Ω–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                    return False
            else:
                print("‚ùå Ngrok –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ngrok: {e}")
            return False
    
    def setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...")
        try:
            result = subprocess.run([
                sys.executable, 'setup_ngrok_webhook.py'
            ], capture_output=True, text=True, timeout=30)
            
            if result.returncode == 0:
                print("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook")
                print(result.stderr)
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False
    
    def wait_for_django(self, timeout=60):
        """–û–∂–∏–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Django"""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Django...")
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                import requests
                response = requests.get("http://localhost:8000/admin/", timeout=5)
                if response.status_code in [200, 302, 403]:
                    print("‚úÖ Django –≥–æ—Ç–æ–≤")
                    return True
            except:
                pass
            
            time.sleep(2)
        
        print("‚ùå Django –Ω–µ –≥–æ—Ç–æ–≤")
        return False
    
    def monitor_processes(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        while self.running:
            for name, process in self.processes.items():
                if process.poll() is not None:
                    print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å {name} –∑–∞–≤–µ—Ä—à–∏–ª—Å—è")
                    self.processes.pop(name, None)
            time.sleep(5)
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        self.running = False
        
        for name, process in self.processes.items():
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                try:
                    process.kill()
                    print(f"‚ö†Ô∏è  {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    pass
    
    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"""
        print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –°–ï–†–í–ò–°–û–í")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ngrok
        if not self.check_ngrok():
            print("‚ö†Ô∏è  Ngrok –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ç–µ—Ä–º–∏–Ω–∞–ª–µ: ngrok http 8000")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Django
        if not self.start_django():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Django")
            return False
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Django
        if not self.wait_for_django():
            print("‚ùå Django –Ω–µ –≥–æ—Ç–æ–≤")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Celery
        self.start_celery()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        if self.check_ngrok():
            self.setup_webhook()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor_thread = threading.Thread(target=self.monitor_processes)
        monitor_thread.daemon = True
        monitor_thread.start()
        
        print("\nüéâ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!")
        print("üìã –°—Ç–∞—Ç—É—Å:")
        print("   ‚úÖ Django —Å–µ—Ä–≤–µ—Ä")
        print("   ‚úÖ Celery worker")
        print("   ‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        print("\nü§ñ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–æ—Ç–∞!")
        print("   –ö–æ–º–∞–Ω–¥—ã: /start, /menu, /orders, /status, /help")
        
        # –û–∂–∏–¥–∞–µ–º —Å–∏–≥–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
        finally:
            self.stop_all()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = ServiceManager()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        manager.stop_all()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        manager.run()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        manager.stop_all()

if __name__ == '__main__':
    main() 