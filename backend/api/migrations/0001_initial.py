# Generated by Django 4.2.7 on 2025-08-07 09:46

import api.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='AddOn',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название')),
                ('price', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Цена')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активно')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Дополнение',
                'verbose_name_plural': 'Дополнения',
                'ordering': ['category', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('street', models.CharField(max_length=255, verbose_name='Улица')),
                ('house_number', models.CharField(max_length=20, verbose_name='Номер дома')),
                ('apartment', models.CharField(blank=True, max_length=20, null=True, verbose_name='Квартира')),
                ('city', models.CharField(default='Ташкент', max_length=100, verbose_name='Город')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='Широта')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='Долгота')),
                ('is_primary', models.BooleanField(default=False, verbose_name='Основной адрес')),
                ('phone_number', models.CharField(help_text='Формат: +998 90 123 45 67 или 901234567', max_length=20, validators=[api.models.validate_uzbek_phone_number], verbose_name='Номер телефона')),
                ('comment', models.TextField(blank=True, null=True, verbose_name='Комментарий к адресу')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Адрес',
                'verbose_name_plural': 'Адреса',
                'ordering': ['-is_primary', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='MenuItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField(blank=True)),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('image', models.ImageField(blank=True, null=True, upload_to='menu_items/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_hit', models.BooleanField(default=False, verbose_name='Хит продаж')),
                ('is_new', models.BooleanField(default=False, verbose_name='Новинка')),
                ('priority', models.PositiveIntegerField(default=0, help_text='Чем меньше число, тем выше в списке', verbose_name='Порядок отображения')),
                ('add_on_options', models.ManyToManyField(blank=True, to='api.addon', verbose_name='Доступные дополнения')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.category')),
            ],
            options={
                'ordering': ['priority', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('status', models.CharField(choices=[('pending', 'Ожидает'), ('preparing', 'Готовится'), ('delivering', 'Доставляется'), ('completed', 'Выполнен'), ('cancelled', 'Отменен')], default='pending', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('delivery_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Стоимость доставки')),
                ('discounted_total', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Итоговая сумма после скидки')),
                ('delivery_time', models.DateTimeField(blank=True, null=True, verbose_name='Время доставки')),
                ('notes', models.TextField(blank=True, help_text='Комментарии клиента', verbose_name='Примечания к заказу')),
                ('address', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.address', verbose_name='Адрес доставки')),
            ],
            options={
                'verbose_name': 'Заказ',
                'verbose_name_plural': 'Заказы',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('telegram_id', models.BigIntegerField(unique=True)),
                ('username', models.CharField(blank=True, max_length=255, null=True)),
                ('first_name', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'indexes': [models.Index(fields=['telegram_id'], name='api_user_telegra_2eeecc_idx'), models.Index(fields=['created_at'], name='api_user_created_f8e07b_idx')],
            },
        ),
        migrations.CreateModel(
            name='SizeOption',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='Название размера')),
                ('price_modifier', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Модификатор цены')),
                ('description', models.TextField(blank=True, help_text='Например: 30 см, 8 кусочков', verbose_name='Описание размера')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активно')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('menu_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.menuitem', verbose_name='Блюдо')),
            ],
            options={
                'verbose_name': 'Размер',
                'verbose_name_plural': 'Размеры',
                'ordering': ['price_modifier'],
            },
        ),
        migrations.CreateModel(
            name='Promotion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Название акции')),
                ('description', models.TextField(blank=True, verbose_name='Описание')),
                ('discount_type', models.CharField(choices=[('PERCENT', 'Процентная скидка'), ('FIXED_AMOUNT', 'Фиксированная сумма'), ('FREE_ITEM', 'Бесплатный товар'), ('FREE_DELIVERY', 'Бесплатная доставка')], max_length=20, verbose_name='Тип скидки')),
                ('discount_value', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='Значение скидки')),
                ('min_order_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Минимальная сумма заказа')),
                ('max_discount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Максимальная сумма скидки')),
                ('usage_count', models.PositiveIntegerField(default=0, verbose_name='Количество использований')),
                ('max_uses', models.PositiveIntegerField(blank=True, null=True, verbose_name='Максимальное количество использований')),
                ('valid_from', models.DateTimeField(verbose_name='Действует с')),
                ('valid_to', models.DateTimeField(verbose_name='Действует до')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('applicable_items', models.ManyToManyField(blank=True, to='api.menuitem', verbose_name='Применимые блюда')),
                ('free_addon', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='free_in_promotions', to='api.addon', verbose_name='Бесплатное дополнение')),
                ('free_item', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='free_in_promotions', to='api.menuitem', verbose_name='Бесплатный товар')),
            ],
            options={
                'verbose_name': 'Акция',
                'verbose_name_plural': 'Акции',
                'ordering': ['-valid_from'],
            },
        ),
        migrations.CreateModel(
            name='OrderItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('quantity', models.PositiveIntegerField(default=1)),
                ('add_ons', models.ManyToManyField(blank=True, to='api.addon', verbose_name='Добавленные дополнения')),
                ('menu_item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.menuitem')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.order')),
                ('size_option', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.sizeoption', verbose_name='Выбранный размер')),
            ],
        ),
        migrations.AddField(
            model_name='order',
            name='items',
            field=models.ManyToManyField(through='api.OrderItem', to='api.menuitem'),
        ),
        migrations.AddField(
            model_name='order',
            name='promotion',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='api.promotion', verbose_name='Примененная акция'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='api.user'),
        ),
        migrations.AddField(
            model_name='menuitem',
            name='size_options',
            field=models.ManyToManyField(blank=True, to='api.sizeoption', verbose_name='Доступные размеры'),
        ),
        migrations.CreateModel(
            name='DeliveryZone',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Название зоны')),
                ('city', models.CharField(max_length=100, verbose_name='Город')),
                ('center_latitude', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MinValueValidator(-90), django.core.validators.MaxValueValidator(90)], verbose_name='Широта центра')),
                ('center_longitude', models.DecimalField(decimal_places=6, max_digits=9, validators=[django.core.validators.MinValueValidator(-180), django.core.validators.MaxValueValidator(180)], verbose_name='Долгота центра')),
                ('radius_km', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0.1), django.core.validators.MaxValueValidator(100)], verbose_name='Радиус зоны (км)')),
                ('delivery_fee', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='Стоимость доставки')),
                ('min_order_amount', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='Минимальная сумма для бесплатной доставки')),
                ('is_active', models.BooleanField(default=True, verbose_name='Активна')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Зона доставки',
                'verbose_name_plural': 'Зоны доставки',
                'ordering': ['city', 'name'],
                'indexes': [models.Index(fields=['city'], name='api_deliver_city_ec5d6b_idx'), models.Index(fields=['is_active'], name='api_deliver_is_acti_8035b9_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['name'], name='api_categor_name_53a3ad_idx'),
        ),
        migrations.AddIndex(
            model_name='category',
            index=models.Index(fields=['created_at'], name='api_categor_created_c87ac2_idx'),
        ),
        migrations.AddField(
            model_name='address',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to='api.user'),
        ),
        migrations.AddField(
            model_name='addon',
            name='available_for_categories',
            field=models.ManyToManyField(blank=True, related_name='available_addons', to='api.category', verbose_name='Доступно для категорий'),
        ),
        migrations.AddField(
            model_name='addon',
            name='category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='api.category', verbose_name='Категория'),
        ),
        migrations.AddIndex(
            model_name='sizeoption',
            index=models.Index(fields=['menu_item'], name='api_sizeopt_menu_it_403bc9_idx'),
        ),
        migrations.AddIndex(
            model_name='sizeoption',
            index=models.Index(fields=['is_active'], name='api_sizeopt_is_acti_97580c_idx'),
        ),
        migrations.AddIndex(
            model_name='sizeoption',
            index=models.Index(fields=['price_modifier'], name='api_sizeopt_price_m_c043a7_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='sizeoption',
            unique_together={('name', 'menu_item')},
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['is_active'], name='api_promoti_is_acti_47b574_idx'),
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['valid_from', 'valid_to'], name='api_promoti_valid_f_8e3590_idx'),
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['discount_type'], name='api_promoti_discoun_786280_idx'),
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['usage_count'], name='api_promoti_usage_c_98039b_idx'),
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['max_uses'], name='api_promoti_max_use_40ea11_idx'),
        ),
        migrations.AddIndex(
            model_name='promotion',
            index=models.Index(fields=['is_active', 'valid_from', 'valid_to'], name='api_promoti_is_acti_c476a6_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order'], name='api_orderit_order_i_3f9c70_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['menu_item'], name='api_orderit_menu_it_cdc10b_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['order', 'menu_item'], name='api_orderit_order_i_6446ea_idx'),
        ),
        migrations.AddIndex(
            model_name='orderitem',
            index=models.Index(fields=['size_option'], name='api_orderit_size_op_499bdd_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user'], name='api_order_user_id_764746_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['created_at'], name='api_order_created_7fb22c_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status'], name='api_order_status_dee4b6_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['delivery_time'], name='api_order_deliver_8f8f17_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['user', 'status'], name='api_order_user_id_536555_idx'),
        ),
        migrations.AddIndex(
            model_name='order',
            index=models.Index(fields=['status', 'created_at'], name='api_order_status_1d49fe_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['category'], name='api_menuite_categor_71a6c8_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['price'], name='api_menuite_price_e54677_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['created_at'], name='api_menuite_created_f4ff98_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['category', 'created_at'], name='api_menuite_categor_aa33ac_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_hit'], name='api_menuite_is_hit_d8dec1_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_new'], name='api_menuite_is_new_82ee42_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['priority'], name='api_menuite_priorit_8d768b_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_hit', 'priority', 'created_at'], name='api_menuite_is_hit_60d4ca_idx'),
        ),
        migrations.AddIndex(
            model_name='menuitem',
            index=models.Index(fields=['is_new', 'priority', 'created_at'], name='api_menuite_is_new_07042b_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['user', 'is_primary'], name='api_address_user_id_855814_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['user', 'created_at'], name='api_address_user_id_164896_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['user'], name='api_address_user_id_bd0d1d_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['is_primary'], name='api_address_is_prim_26abea_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['created_at'], name='api_address_created_fa3e8e_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['city'], name='api_address_city_b3934e_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['user', 'city'], name='api_address_user_id_ac82f9_idx'),
        ),
        migrations.AddIndex(
            model_name='address',
            index=models.Index(fields=['user', 'is_primary', 'created_at'], name='api_address_user_id_cecf79_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='address',
            unique_together={('user', 'street', 'house_number', 'apartment', 'city')},
        ),
        migrations.AddIndex(
            model_name='addon',
            index=models.Index(fields=['category'], name='api_addon_categor_8eac42_idx'),
        ),
        migrations.AddIndex(
            model_name='addon',
            index=models.Index(fields=['is_active'], name='api_addon_is_acti_738b70_idx'),
        ),
        migrations.AddIndex(
            model_name='addon',
            index=models.Index(fields=['price'], name='api_addon_price_d687d2_idx'),
        ),
        migrations.AddIndex(
            model_name='addon',
            index=models.Index(fields=['category', 'is_active'], name='api_addon_categor_c2189f_idx'),
        ),
    ]
