import os
import requests
import logging
from celery import shared_task
from django.conf import settings
from django.core.cache import cache

logger = logging.getLogger(__name__)

@shared_task(
    bind=True,
    name='api.tasks.send_telegram_notification',
    queue='notifications',
    autoretry_for=(requests.RequestException,),
    retry_kwargs={'max_retries': 3, 'countdown': 5},
    retry_backoff=True,
)
def send_telegram_notification(self, chat_id, message, parse_mode='HTML'):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
        message: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        parse_mode: –†–µ–∂–∏–º –ø–∞—Ä—Å–∏–Ω–≥–∞ (HTML –∏–ª–∏ Markdown)
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        bot_token = settings.BOT_TOKEN
        if not bot_token:
            logger.error("BOT_TOKEN not configured")
            return {'success': False, 'error': 'BOT_TOKEN not configured'}
        
        # URL –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        url = f"https://api.telegram.org/bot{bot_token}/sendMessage"
        
        # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        data = {
            'chat_id': chat_id,
            'text': message,
            'parse_mode': parse_mode,
            'disable_web_page_preview': True,
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —Å —Ç–∞–π–º–∞—É—Ç–æ–º
        response = requests.post(url, json=data, timeout=10)
        response.raise_for_status()
        
        result = response.json()
        
        if result.get('ok'):
            logger.info(f"Notification sent successfully to chat_id={chat_id}")
            return {
                'success': True,
                'message_id': result['result']['message_id'],
                'chat_id': chat_id
            }
        else:
            error_msg = f"Telegram API error: {result.get('description', 'Unknown error')}"
            logger.error(f"Failed to send notification to chat_id={chat_id}: {error_msg}")
            return {'success': False, 'error': error_msg}
            
    except requests.RequestException as e:
        logger.error(f"Network error sending notification to chat_id={chat_id}: {str(e)}")
        # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ Celery
        raise self.retry(exc=e, countdown=5)
        
    except Exception as e:
        logger.error(f"Unexpected error sending notification to chat_id={chat_id}: {str(e)}")
        return {'success': False, 'error': str(e)}

@shared_task(
    bind=True,
    name='api.tasks.send_bulk_notifications',
    queue='notifications',
    autoretry_for=(requests.RequestException,),
    retry_kwargs={'max_retries': 2, 'countdown': 10},
)
def send_bulk_notifications(self, notifications_data):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    
    Args:
        notifications_data: –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            [{'chat_id': 123, 'message': 'text', 'parse_mode': 'HTML'}, ...]
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        results = []
        success_count = 0
        error_count = 0
        
        for notification in notifications_data:
            try:
                result = send_telegram_notification.delay(
                    notification['chat_id'],
                    notification['message'],
                    notification.get('parse_mode', 'HTML')
                )
                results.append({
                    'chat_id': notification['chat_id'],
                    'task_id': result.id,
                    'status': 'queued'
                })
                success_count += 1
                
            except Exception as e:
                logger.error(f"Error queuing notification for chat_id={notification['chat_id']}: {str(e)}")
                results.append({
                    'chat_id': notification['chat_id'],
                    'error': str(e),
                    'status': 'failed'
                })
                error_count += 1
        
        logger.info(f"Bulk notifications queued: {success_count} success, {error_count} errors")
        return {
            'success': True,
            'total': len(notifications_data),
            'success_count': success_count,
            'error_count': error_count,
            'results': results
        }
        
    except Exception as e:
        logger.error(f"Error in bulk notifications: {str(e)}")
        return {'success': False, 'error': str(e)}

@shared_task(
    bind=True,
    name='api.tasks.send_order_status_notification',
    queue='notifications',
)
def send_order_status_notification(self, chat_id, order_id, old_status, new_status):
    """
    –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
    
    Args:
        chat_id: ID —á–∞—Ç–∞ –≤ Telegram
        order_id: ID –∑–∞–∫–∞–∑–∞
        old_status: –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        new_status: –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
    """
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
        status_messages = {
            'preparing': '–í–∞—à –∑–∞–∫–∞–∑ –≥–æ—Ç–æ–≤–∏—Ç—Å—è! üç≥',
            'delivering': '–í–∞—à –∑–∞–∫–∞–∑ –≤ –ø—É—Ç–∏! üöö',
            'completed': '–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω! –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! ‚úÖ',
            'cancelled': '–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω. ‚ùå'
        }
        
        message = status_messages.get(new_status, f'–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {new_status}')
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        result = send_telegram_notification.delay(chat_id, message)
        
        logger.info(f"Order status notification queued: order_id={order_id}, {old_status}->{new_status}")
        return {
            'success': True,
            'order_id': order_id,
            'old_status': old_status,
            'new_status': new_status,
            'task_id': result.id
        }
        
    except Exception as e:
        logger.error(f"Error sending order status notification: {str(e)}")
        return {'success': False, 'error': str(e)}

@shared_task(
    bind=True,
    name='api.tasks.cleanup_old_notifications',
    queue='default',
)
def cleanup_old_notifications(self):
    """
    –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ –∫—ç—à–∞
    """
    try:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –∏–∑ –∫—ç—à–∞ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
        cache_keys = cache.keys('notification_*')
        cleaned_count = 0
        
        for key in cache_keys:
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            cleaned_count += 1
        
        logger.info(f"Cleaned up {cleaned_count} old notification records")
        return {'success': True, 'cleaned_count': cleaned_count}
        
    except Exception as e:
        logger.error(f"Error cleaning up notifications: {str(e)}")
        return {'success': False, 'error': str(e)} 

@shared_task(bind=True, name='api.tasks.geocode_yandex', queue='default')
def geocode_yandex(self, address=None, lat=None, lon=None):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç—ã —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    address: —Å—Ç—Ä–æ–∫–∞ –∞–¥—Ä–µ—Å–∞ (–ø—Ä—è–º–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
    lat, lon: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (–æ–±—Ä–∞—Ç–Ω–æ–µ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)
    """
    try:
        api_key = settings.YANDEX_MAPS_API_KEY
        url = 'https://geocode-maps.yandex.ru/1.x/'
        cache_key = None
        params = {
            'apikey': api_key,
            'format': 'json',
            'lang': 'ru_RU',
        }
        if address:
            cache_key = f'yandex_geocode:{address.strip().lower()}'
            params['geocode'] = address
        elif lat is not None and lon is not None:
            cache_key = f'yandex_reverse:{lat},{lon}'
            params['geocode'] = f'{lon},{lat}'
        else:
            return {'error': 'address or lat/lon required'}

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        cached = cache.get(cache_key)
        if cached:
            return {'cached': True, 'result': cached}

        # –ó–∞–ø—Ä–æ—Å –∫ –Ø–Ω–¥–µ–∫—Å API
        r = requests.get(url, params=params, timeout=10)
        if r.status_code != 200:
            return {'error': 'Yandex API error', 'details': r.text}
        resp = r.json()
        try:
            feature = resp['response']['GeoObjectCollection']['featureMember'][0]['GeoObject']
            if address:
                pos = feature['Point']['pos']
                lon_, lat_ = pos.split()
                result = {'lat': float(lat_), 'lon': float(lon_), 'raw': feature}
            else:
                result_address = feature['metaDataProperty']['GeocoderMetaData']['text']
                result = {'address': result_address, 'raw': feature}
            # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ 24 —á–∞—Å–∞
            cache.set(cache_key, result, 60*60*24)
            return {'cached': False, 'result': result}
        except Exception as e:
            return {'error': 'Not found', 'details': str(e)}
    except Exception as e:
        return {'error': str(e)} 