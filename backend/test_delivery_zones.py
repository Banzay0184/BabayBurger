#!/usr/bin/env python
"""
–¢–µ—Å—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏, –≤–∞–ª–∏–¥–∞—Ü–∏—é –∞–¥—Ä–µ—Å–æ–≤ –∏ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã
"""

import os
import sys
import django
import requests
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from api.models import User, Address, DeliveryZone
from django.core.management import execute_from_command_line

def create_test_delivery_zones():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ë—É—Ö–∞—Ä—ã –∏ –ö–∞–≥–∞–Ω–∞"""
    print("üó∫Ô∏è –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏...")
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–æ–Ω—ã
    DeliveryZone.objects.all().delete()
    
    # –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ë—É—Ö–∞—Ä—ã
    bukhara_zone = DeliveryZone.objects.create(
        name="–ë—É—Ö–∞—Ä–∞ - –¶–µ–Ω—Ç—Ä",
        city="–ë—É—Ö–∞—Ä–∞",
        center_latitude=39.7747,
        center_longitude=64.4286,
        radius_km=20.0,
        is_active=True
    )
    
    # –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ö–∞–≥–∞–Ω–∞
    kagan_zone = DeliveryZone.objects.create(
        name="–ö–∞–≥–∞–Ω - –¶–µ–Ω—Ç—Ä",
        city="–ö–∞–≥–∞–Ω",
        center_latitude=39.7167,
        center_longitude=64.5500,
        radius_km=10.0,
        is_active=True
    )
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {bukhara_zone}")
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {kagan_zone}")
    
    return bukhara_zone, kagan_zone

def create_test_user():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print("üë§ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
    
    user, created = User.objects.get_or_create(
        telegram_id=999999999,
        defaults={
            'username': 'test_delivery_user',
            'first_name': 'Test Delivery User'
        }
    )
    
    if created:
        print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
    else:
        print(f"   ‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}")
    
    return user

def create_test_addresses(user):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –∑–æ–Ω–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏"""
    print("üìç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥—Ä–µ—Å–æ–≤...")
    
    # –ê–¥—Ä–µ—Å –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ë—É—Ö–∞—Ä—ã
    bukhara_address = Address.objects.create(
        user=user,
        street="—É–ª. –ò—Å–º–∞–∏–ª–∞ –°–∞–º–∞–Ω–∏",
        house_number="1",
        apartment="1",
        city="–ë—É—Ö–∞—Ä–∞",
        latitude=39.7747,
        longitude=64.4286,
        phone_number="+998 90 123 4567",
        is_primary=True
    )
    
    # –ê–¥—Ä–µ—Å –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –ö–∞–≥–∞–Ω–∞
    kagan_address = Address.objects.create(
        user=user,
        street="—É–ª. –õ–µ–Ω–∏–Ω–∞",
        house_number="10",
        apartment="5",
        city="–ö–∞–≥–∞–Ω",
        latitude=39.7167,
        longitude=64.5500,
        phone_number="+998 90 123 4568",
        is_primary=False
    )
    
    # –ê–¥—Ä–µ—Å –≤–Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ (–¢–∞—à–∫–µ–Ω—Ç)
    tashkent_address = Address.objects.create(
        user=user,
        street="—É–ª. –ù–∞–≤–æ–∏",
        house_number="15",
        apartment="3",
        city="–¢–∞—à–∫–µ–Ω—Ç",
        latitude=41.2995,
        longitude=69.2401,
        phone_number="+998 90 123 4569",
        is_primary=False
    )
    
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥—Ä–µ—Å –≤ –ë—É—Ö–∞—Ä–µ: {bukhara_address.full_address}")
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥—Ä–µ—Å –≤ –ö–∞–≥–∞–Ω–µ: {kagan_address.full_address}")
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω –∞–¥—Ä–µ—Å –≤ –¢–∞—à–∫–µ–Ω—Ç–µ: {tashkent_address.full_address}")
    
    return bukhara_address, kagan_address, tashkent_address

def test_delivery_zone_validation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤–∞–ª–∏–¥–∞—Ü–∏—é –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞
    addresses = Address.objects.all()
    
    for address in addresses:
        print(f"\nüìç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞: {address.full_address}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
        is_in_zone, message = address.is_in_delivery_zone()
        print(f"   –í –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {is_in_zone}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–æ–Ω–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏
        zones_info = address.get_delivery_zones_info()
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏: {len(zones_info)}")
        
        for zone_info in zones_info:
            print(f"     - {zone_info['name']}: —Ä–∞–¥–∏—É—Å {zone_info['radius_km']} –∫–º")
            if zone_info['distance'] is not None:
                print(f"       –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –∑–æ–Ω—ã: {zone_info['distance']:.1f} –∫–º")
            print(f"       –í –∑–æ–Ω–µ: {zone_info['is_in_zone']}")

def test_api_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç API —ç–Ω–¥–ø–æ–∏–Ω—Ç—ã –¥–ª—è –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏"""
    print("\nüåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...")
    
    base_url = "http://localhost:8000/api"
    
    # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
    print("\nüìã –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏")
    try:
        response = requests.get(f"{base_url}/delivery-zones/")
        if response.status_code == 200:
            zones = response.json()
            print(f"   ‚úÖ –ü–æ–ª—É—á–µ–Ω–æ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏: {len(zones)}")
            for zone in zones:
                print(f"     - {zone['name']} ({zone['city']}): —Ä–∞–¥–∏—É—Å {zone['radius_km']} –∫–º")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏
    print("\nüìã –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏")
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å –≤ –ë—É—Ö–∞—Ä–µ
        address_data = {
            "address": {
                "street": "—É–ª. –ò—Å–º–∞–∏–ª–∞ –°–∞–º–∞–Ω–∏",
                "house_number": "1",
                "city": "–ë—É—Ö–∞—Ä–∞",
                "latitude": 39.7747,
                "longitude": 64.4286
            }
        }
        
        response = requests.post(
            f"{base_url}/addresses/delivery-zone-check/",
            json=address_data,
            headers={'Content-Type': 'application/json'}
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úÖ –ê–¥—Ä–µ—Å –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {result['is_in_delivery_zone']}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ: {result['message']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def test_order_creation_with_delivery_zone():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏"""
    print("\nüõí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏...")
    
    base_url = "http://localhost:8000/api"
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = User.objects.get(telegram_id=999999999)
    addresses = Address.objects.filter(user=user)
    
    for address in addresses:
        print(f"\nüìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –¥–ª—è –∞–¥—Ä–µ—Å–∞: {address.full_address}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
        is_in_zone, message = address.is_in_delivery_zone()
        
        if is_in_zone:
            print(f"   ‚úÖ –ê–¥—Ä–µ—Å –≤ –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {message}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑
            order_data = {
                "telegram_id": user.telegram_id,
                "address_id": address.id,
                "total_price": 5000,
                "items": [
                    {"menu_item_id": 1, "quantity": 2}
                ]
            }
            
            try:
                response = requests.post(
                    f"{base_url}/orders/create/",
                    json=order_data,
                    headers={'Content-Type': 'application/json'}
                )
                
                if response.status_code == 201:
                    print(f"   ‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
                else:
                    print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.status_code}")
                    if response.status_code == 400:
                        error_data = response.json()
                        print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {error_data}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        else:
            print(f"   ‚ùå –ê–¥—Ä–µ—Å –≤–Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏: {message}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–∫–ª–æ–Ω–µ–Ω)
            order_data = {
                "telegram_id": user.telegram_id,
                "address_id": address.id,
                "total_price": 5000,
                "items": [
                    {"menu_item_id": 1, "quantity": 2}
                ]
            }
            
            try:
                response = requests.post(
                    f"{base_url}/orders/create/",
                    json=order_data,
                    headers={'Content-Type': 'application/json'}
                )
                
                if response.status_code == 400:
                    error_data = response.json()
                    if 'Address not in delivery zone' in error_data.get('error', ''):
                        print(f"   ‚úÖ –ó–∞–∫–∞–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω: {error_data['message']}")
                    else:
                        print(f"   ‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {error_data}")
                else:
                    print(f"   ‚ùå –ó–∞–∫–∞–∑ –Ω–µ –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω: {response.status_code}")
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")

def cleanup_test_data():
    """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
    Address.objects.filter(user__telegram_id=999999999).delete()
    print("   ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    User.objects.filter(telegram_id=999999999).delete()
    print("   ‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    DeliveryZone.objects.filter(city__in=["–ë—É—Ö–∞—Ä–∞", "–ö–∞–≥–∞–Ω"]).delete()
    print("   ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        bukhara_zone, kagan_zone = create_test_delivery_zones()
        user = create_test_user()
        bukhara_address, kagan_address, tashkent_address = create_test_addresses(user)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
        test_delivery_zone_validation()
        test_api_endpoints()
        test_order_creation_with_delivery_zone()
        
        print("\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        cleanup_test_data()
        print("\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

if __name__ == "__main__":
    main() 