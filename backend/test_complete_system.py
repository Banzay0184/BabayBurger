#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import requests
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def test_bot_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É"""
    print("ü§ñ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–û–¢–£")
    print("=" * 50)
    
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token or bot_token == 'your_bot_token_here':
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        response = requests.get(f"https://api.telegram.org/bot{bot_token}/getMe")
        if response.status_code == 200:
            bot_info = response.json()
            print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info['result']['username']}")
            print(f"   ID: {bot_info['result']['id']}")
            print(f"   –ò–º—è: {bot_info['result']['first_name']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def test_webhook_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å webhook"""
    print("\nüîó –ü–†–û–í–ï–†–ö–ê WEBHOOK")
    print("=" * 50)
    
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        response = requests.get(f"https://api.telegram.org/bot{bot_token}/getWebhookInfo")
        if response.status_code == 200:
            webhook_info = response.json()
            if webhook_info.get('ok'):
                info = webhook_info['result']
                print(f"‚úÖ Webhook URL: {info.get('url', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')}")
                print(f"   –û—à–∏–±–∫–∏: {info.get('last_error_message', '–ù–µ—Ç')}")
                print(f"   –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: {info.get('pending_update_count', 0)}")
                
                if info.get('url'):
                    return True
                else:
                    print("‚ö†Ô∏è  Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                    return False
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook info")
                return False
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook: {e}")
        return False

def test_django_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Django endpoints"""
    print("\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DJANGO ENDPOINTS")
    print("=" * 50)
    
    endpoints = [
        ("http://localhost:8000/admin/", "Admin –ø–∞–Ω–µ–ª—å", "GET"),
        ("http://localhost:8000/api/menu/", "API –º–µ–Ω—é", "GET"),
        ("http://localhost:8000/api/auth/", "API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "GET"),
        ("http://localhost:8000/api/categories/", "API –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "GET"),
        ("http://localhost:8000/api/webhook/", "Webhook endpoint", "POST_WEBHOOK"),
    ]
    
    all_ok = True
    for url, name, method in endpoints:
        try:
            if method == "GET":
                response = requests.get(url, timeout=5)
            elif method == "POST_WEBHOOK":
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
                webhook_data = {
                    "update_id": 123456789,
                    "message": {
                        "message_id": 1,
                        "from": {
                            "id": 123456789,
                            "is_bot": False,
                            "first_name": "Test",
                            "username": "testuser"
                        },
                        "chat": {
                            "id": 123456789,
                            "first_name": "Test",
                            "username": "testuser",
                            "type": "private"
                        },
                        "date": int(time.time()),
                        "text": "/start"
                    }
                }
                response = requests.post(url, json=webhook_data, timeout=5)
            else:
                response = requests.post(url, json={}, timeout=5)
            
            if response.status_code in [200, 302, 403, 405]:
                print(f"‚úÖ {name}: {response.status_code}")
            else:
                print(f"‚ùå {name}: {response.status_code}")
                all_ok = False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {name}: {e}")
            all_ok = False
    
    return all_ok

def test_ngrok():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç ngrok"""
    print("\nüåç –ü–†–û–í–ï–†–ö–ê NGROK")
    print("=" * 50)
    
    try:
        response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
        if response.status_code == 200:
            tunnels = response.json()['tunnels']
            if tunnels:
                ngrok_url = tunnels[0]['public_url']
                print(f"‚úÖ Ngrok URL: {ngrok_url}")
                print(f"   Webhook: {ngrok_url}/api/webhook/")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook —á–µ—Ä–µ–∑ ngrok
                webhook_url = f"{ngrok_url}/api/webhook/"
                try:
                    response = requests.post(webhook_url, json={}, timeout=5)
                    if response.status_code in [200, 400, 401]:
                        print(f"‚úÖ Webhook –¥–æ—Å—Ç—É–ø–µ–Ω: {response.status_code}")
                    else:
                        print(f"‚ö†Ô∏è  Webhook –æ—Ç–≤–µ—Ç: {response.status_code}")
                except Exception as e:
                    print(f"‚ö†Ô∏è  Webhook –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
                
                return True
            else:
                print("‚ùå Ngrok —Ç—É–Ω–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return False
        else:
            print("‚ùå Ngrok –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ ngrok: {e}")
        return False

def test_database():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    print("\nüóÑÔ∏è  –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Django
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
        import django
        django.setup()
        
        from api.models import User, Category, MenuItem, Order
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
        users_count = User.objects.count()
        categories_count = Category.objects.count()
        menu_items_count = MenuItem.objects.count()
        orders_count = Order.objects.count()
        
        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
        print(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {categories_count}")
        print(f"‚úÖ –ë–ª—é–¥–∞: {menu_items_count}")
        print(f"‚úÖ –ó–∞–∫–∞–∑—ã: {orders_count}")
        
        if categories_count > 0 and menu_items_count > 0:
            return True
        else:
            print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ë–î: {e}")
        return False

def send_test_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print("\nüì§ –û–¢–ü–†–ê–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø")
    print("=" * 50)
    
    bot_token = os.getenv('BOT_TOKEN')
    chat_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    if not chat_id:
        print("‚è≠Ô∏è  –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return True
    
    try:
        message_data = {
            'chat_id': chat_id,
            'text': 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç StreetBurger Bot!\n\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!'
        }
        
        response = requests.post(
            f"https://api.telegram.org/bot{bot_token}/sendMessage",
            json=message_data
        )
        
        if response.status_code == 200:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üß™ –ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    results = {}
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    results['bot'] = test_bot_connection()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook
    results['webhook'] = test_webhook_status()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Django
    results['django'] = test_django_endpoints()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º ngrok
    results['ngrok'] = test_ngrok()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    results['database'] = test_database()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    results['test_message'] = send_test_message()
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 50)
    
    status_emoji = {True: "‚úÖ", False: "‚ùå"}
    
    for test_name, result in results.items():
        print(f"{status_emoji[result]} {test_name.replace('_', ' ').title()}")
    
    all_passed = all(results.values())
    
    if all_passed:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("ü§ñ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º –±–æ—Ç–æ–º!")
    else:
        print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ù–ï –ü–†–û–ô–î–ï–ù–´")
        print("üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")
    
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram")
    print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
    print("   3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª")
    
    return all_passed

if __name__ == '__main__':
    main() 