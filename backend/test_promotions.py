#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –∞–∫—Ü–∏–π, –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –º–µ–Ω—é
–û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∞–∫—Ü–∏–π
"""

import os
import sys
import django
import time
import requests
from django.db import transaction
from django.db.utils import OperationalError
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from api.models import User, Address, Category, SizeOption, AddOn, MenuItem, Promotion, DeliveryZone, Order, OrderItem

def print_step(step_number, title):
    print(f"\nüìã {step_number}. {title}")
    print("=" * 50)

def print_result(success, message):
    if success:
        print(f"‚úÖ {message}")
    else:
        print(f"‚ùå {message}")

def retry_on_db_lock(func, max_retries=3, delay=1):
    """–ü–æ–≤—Ç–æ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    for attempt in range(max_retries):
        try:
            return func()
        except OperationalError as e:
            if "database is locked" in str(e) and attempt < max_retries - 1:
                print(f"‚ö†Ô∏è  –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}")
                time.sleep(delay)
                continue
            else:
                raise e

def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏"""
    
    print_step(1, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, created = retry_on_db_lock(lambda: User.objects.get_or_create(
        telegram_id=908758841,
        defaults={'username': 'abidov_0184', 'first_name': '–®–∞—Ö–∑–æ–¥'}
    ))
    print_result(True, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω: {user.first_name}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    delivery_zone, created = retry_on_db_lock(lambda: DeliveryZone.objects.get_or_create(
        city='–ë—É—Ö–∞—Ä–∞',
        name='–ë—É—Ö–∞—Ä–∞ –¶–µ–Ω—Ç—Ä',
        defaults={
            'center_latitude': 39.768100,
            'center_longitude': 64.455600,
            'radius_km': 5.0,
            'delivery_fee': 5000.00,
            'min_order_amount': 50000.00,
            'is_active': True
        }
    ))
    print_result(True, f"–ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–∑–¥–∞–Ω–∞: {delivery_zone.name}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
    address, created = retry_on_db_lock(lambda: Address.objects.get_or_create(
        user=user,
        street='–¢–µ—Å—Ç–æ–≤–∞—è —É–ª–∏—Ü–∞',
        house_number='10',
        city='–ë—É—Ö–∞—Ä–∞',
        defaults={
            'latitude': 39.768100,
            'longitude': 64.455600,
            'phone_number': '+998901234567',
            'is_primary': True
        }
    ))
    print_result(True, f"–ê–¥—Ä–µ—Å —Å–æ–∑–¥–∞–Ω: {address.street}, {address.house_number}, {address.city}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    category, created = retry_on_db_lock(lambda: Category.objects.get_or_create(
        name='–ü–∏—Ü—Ü–∞',
        defaults={'description': '–í–∫—É—Å–Ω—ã–µ –ø–∏—Ü—Ü—ã'}
    ))
    print_result(True, f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å–æ–∑–¥–∞–Ω–∞: {category.name}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤
    small_size, created = retry_on_db_lock(lambda: SizeOption.objects.get_or_create(
        name='–ú–∞–ª–µ–Ω—å–∫–∞—è',
        defaults={
            'price_modifier': 0,
            'description': '25 —Å–º, 6 –∫—É—Å–æ—á–∫–æ–≤',
            'is_active': True
        }
    ))
    
    large_size, created = retry_on_db_lock(lambda: SizeOption.objects.get_or_create(
        name='–ë–æ–ª—å—à–∞—è',
        defaults={
            'price_modifier': 20000,
            'description': '35 —Å–º, 8 –∫—É—Å–æ—á–∫–æ–≤',
            'is_active': True
        }
    ))
    print_result(True, f"–†–∞–∑–º–µ—Ä—ã —Å–æ–∑–¥–∞–Ω—ã: {small_size.name}, {large_size.name}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π
    ketchup, created = retry_on_db_lock(lambda: AddOn.objects.get_or_create(
        name='–ö–µ—Ç—á—É–ø',
        defaults={
            'price': 2000,
            'category': category,
            'is_active': True
        }
    ))
    
    cheese_sauce, created = retry_on_db_lock(lambda: AddOn.objects.get_or_create(
        name='–°—ã—Ä–Ω—ã–π —Å–æ—É—Å',
        defaults={
            'price': 3000,
            'category': category,
            'is_active': True
        }
    ))
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try:
        retry_on_db_lock(lambda: ketchup.available_for_categories.add(category))
        retry_on_db_lock(lambda: cheese_sauce.available_for_categories.add(category))
        print_result(True, f"–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã: {ketchup.name}, {cheese_sauce.name}")
    except Exception as e:
        print_result(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {str(e)}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –±–ª—é–¥–∞
    menu_item, created = retry_on_db_lock(lambda: MenuItem.objects.get_or_create(
        name='–ü–∏—Ü—Ü–∞ –ú–∞—Ä–≥–∞—Ä–∏—Ç–∞',
        defaults={
            'description': '–í–∫—É—Å–Ω–∞—è –ø–∏—Ü—Ü–∞',
            'price': 50000,
            'category': category,
            'is_hit': True,
            'is_new': True,
            'priority': 1
        }
    ))
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π –∫ –±–ª—é–¥—É
    try:
        retry_on_db_lock(lambda: menu_item.size_options.add(small_size, large_size))
        retry_on_db_lock(lambda: menu_item.add_on_options.add(ketchup, cheese_sauce))
        print_result(True, f"–ë–ª—é–¥–æ —Å–æ–∑–¥–∞–Ω–æ: {menu_item.name} (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {menu_item.priority})")
    except Exception as e:
        print_result(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ–ø—Ü–∏–π –∫ –±–ª—é–¥—É: {str(e)}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫—Ü–∏–π
    now = datetime.now()
    
    promo_percent, created = retry_on_db_lock(lambda: Promotion.objects.get_or_create(
        name='–°–∫–∏–¥–∫–∞ 10%',
        defaults={
            'description': '10% –Ω–∞ –≤—Å—ë',
            'discount_type': 'PERCENT',
            'discount_value': 10,
            'max_discount': 15000,
            'max_uses': 100,
            'valid_from': now - timedelta(days=1),
            'valid_to': now + timedelta(days=1),
            'is_active': True
        }
    ))
    
    promo_free_delivery, created = retry_on_db_lock(lambda: Promotion.objects.get_or_create(
        name='–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
        defaults={
            'description': '–ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 100000',
            'discount_type': 'FREE_DELIVERY',
            'discount_value': 0,
            'min_order_amount': 100000,
            'valid_from': now - timedelta(days=1),
            'valid_to': now + timedelta(days=1),
            'is_active': True
        }
    ))
    
    promo_free_addon, created = retry_on_db_lock(lambda: Promotion.objects.get_or_create(
        name='–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ—Ç—á—É–ø',
        defaults={
            'description': '–ö–µ—Ç—á—É–ø –±–µ—Å–ø–ª–∞—Ç–Ω–æ –∫ –ø–∏—Ü—Ü–µ',
            'discount_type': 'FREE_ITEM',
            'discount_value': 0,
            'valid_from': now - timedelta(days=1),
            'valid_to': now + timedelta(days=1),
            'is_active': True,
            'free_addon': ketchup
        }
    ))
    
    print_result(True, f"–ê–∫—Ü–∏–∏ —Å–æ–∑–¥–∞–Ω—ã: {promo_percent.name}, {promo_free_delivery.name}, {promo_free_addon.name}")
    print_result(True, "–¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã")
    
    return user, address, category, small_size, large_size, ketchup, cheese_sauce, menu_item, promo_percent, promo_free_delivery, promo_free_addon

def test_promotion_isolated(promotion_name, order_data, expected_usage_increase=1):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∞–∫—Ü–∏—é –≤ –∏–∑–æ–ª—è—Ü–∏–∏"""
    print(f"\nüéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–∫—Ü–∏–∏: {promotion_name}")
    print("-" * 40)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ü–∏—é
    promotion = retry_on_db_lock(lambda: Promotion.objects.get(name=promotion_name))
    initial_usage = promotion.usage_count
    
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –¥—Ä—É–≥–∏–µ –∞–∫—Ü–∏–∏
    retry_on_db_lock(lambda: Promotion.objects.exclude(name=promotion_name).update(is_active=False))
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        response = requests.post('http://localhost:8000/api/orders/create/', json=order_data)
        if response.status_code == 201:
            order_data_response = response.json()
            print_result(True, f"–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ID {order_data_response['id']}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π
            promotion.refresh_from_db()
            new_usage = promotion.usage_count
            usage_increased = new_usage > initial_usage
            
            print_result(usage_increased, f"–°—á–µ—Ç—á–∏–∫ –∞–∫—Ü–∏–∏ '{promotion_name}': {initial_usage} ‚Üí {new_usage} (+{new_usage - initial_usage})")
            
            return usage_increased
        else:
            print_result(False, f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {response.status_code} {response.text}")
            return False
    except Exception as e:
        print_result(False, f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑: {str(e)}")
        return False
    finally:
        # –†–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ –∞–∫—Ü–∏–∏
        retry_on_db_lock(lambda: Promotion.objects.update(is_active=True))

def test_edge_cases(user, address, small_size, large_size, ketchup, cheese_sauce, menu_item):
    print_step('EC1', '–ü–æ–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —É—Å–ª–æ–≤–∏—è: min_order_amount')
    # min_order_amount —Ä–æ–≤–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ
    free_delivery = Promotion.objects.get(name='–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞')
    order_data = {
        'telegram_id': user.telegram_id,
        'address_id': address.id,
        'items': [
            {
                'menu_item_id': menu_item.id,
                'quantity': 2,  # 50 000 * 2 = 100 000
                'size_option_id': small_size.id
            }
        ]
    }
    test_promotion_isolated('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', order_data)

    print_step('EC2', 'max_uses: –∞–∫—Ü–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–∏–º–µ–Ω—è—Ç—å—Å—è –ø–æ—Å–ª–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞')
    percent = Promotion.objects.get(name='–°–∫–∏–¥–∫–∞ 10%')
    percent.max_uses = 2
    percent.usage_count = 2
    percent.save()
    order_data = {
        'telegram_id': user.telegram_id,
        'address_id': address.id,
        'items': [
            {
                'menu_item_id': menu_item.id,
                'quantity': 1,
                'size_option_id': small_size.id
            }
        ]
    }
    print('–û–∂–∏–¥–∞–µ–º: –∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, —Å—á–µ—Ç—á–∏–∫ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è')
    test_promotion_isolated('–°–∫–∏–¥–∫–∞ 10%', order_data, expected_usage_increase=0)
    percent.max_uses = 100
    percent.usage_count = 0
    percent.save()

    print_step('EC3', 'max_discount: —Å–∫–∏–¥–∫–∞ –Ω–µ –ø—Ä–µ–≤—ã—à–∞–µ—Ç –ª–∏–º–∏—Ç')
    percent.max_discount = 1000
    percent.save()
    order_data = {
        'telegram_id': user.telegram_id,
        'address_id': address.id,
        'items': [
            {
                'menu_item_id': menu_item.id,
                'quantity': 10,
                'size_option_id': small_size.id
            }
        ]
    }
    test_promotion_isolated('–°–∫–∏–¥–∫–∞ 10%', order_data)
    percent.max_discount = 15000
    percent.save()

    print_step('EC4', 'valid_from/valid_to: –∞–∫—Ü–∏—è –≤–Ω–µ —Å—Ä–æ–∫–∞ –¥–µ–π—Å—Ç–≤–∏—è')
    import datetime
    free_delivery = Promotion.objects.get(name='–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞')
    old_from, old_to = free_delivery.valid_from, free_delivery.valid_to
    free_delivery.valid_from = datetime.datetime.now() + datetime.timedelta(days=1)
    free_delivery.valid_to = datetime.datetime.now() + datetime.timedelta(days=2)
    free_delivery.save()
    order_data = {
        'telegram_id': user.telegram_id,
        'address_id': address.id,
        'items': [
            {
                'menu_item_id': menu_item.id,
                'quantity': 2,
                'size_option_id': small_size.id
            }
        ]
    }
    print('–û–∂–∏–¥–∞–µ–º: –∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, —Å—á–µ—Ç—á–∏–∫ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è')
    test_promotion_isolated('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', order_data, expected_usage_increase=0)
    free_delivery.valid_from, free_delivery.valid_to = old_from, old_to
    free_delivery.save()

    print_step('EC5', 'is_active: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è –∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è')
    free_delivery.is_active = False
    free_delivery.save()
    print('–û–∂–∏–¥–∞–µ–º: –∞–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è, —Å—á–µ—Ç—á–∏–∫ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç—Å—è')
    test_promotion_isolated('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', order_data, expected_usage_increase=0)
    free_delivery.is_active = True
    free_delivery.save()

    print_step('EC6', '–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –µ—Å–ª–∏ —ç–∫–æ–Ω–æ–º–∏—è –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è, –∫–∞–∫–∞—è –∞–∫—Ü–∏—è –≤—ã–±–µ—Ä–µ—Ç—Å—è?')
    percent = Promotion.objects.get(name='–°–∫–∏–¥–∫–∞ 10%')
    free_delivery = Promotion.objects.get(name='–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞')
    percent.discount_value = 10
    percent.max_discount = 5000
    percent.save()
    free_delivery.min_order_amount = 50000
    free_delivery.save()
    # –ó–∞–∫–∞–∑ –Ω–∞ 50000, –æ–±–µ –∞–∫—Ü–∏–∏ –¥–∞—é—Ç 5000 —ç–∫–æ–Ω–æ–º–∏–∏
    order_data = {
        'telegram_id': user.telegram_id,
        'address_id': address.id,
        'items': [
            {
                'menu_item_id': menu_item.id,
                'quantity': 1,
                'size_option_id': small_size.id
            }
        ]
    }
    print('–û–∂–∏–¥–∞–µ–º: –æ–¥–Ω–∞ –∏–∑ –∞–∫—Ü–∏–π –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω–∞ (—Å–º–æ—Ç—Ä–∏–º –∫–∞–∫–∞—è)')
    test_promotion_isolated('–°–∫–∏–¥–∫–∞ 10%', order_data)
    test_promotion_isolated('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', order_data)
    # –í–µ—Ä–Ω—É—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è
    percent.max_discount = 15000
    percent.save()
    free_delivery.min_order_amount = 100000
    free_delivery.save()

    print_step('EC7', 'FREE_ITEM: –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑')
    free_addon = Promotion.objects.get(name='–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ—Ç—á—É–ø')
    order_data = {
        'telegram_id': user.telegram_id,
        'address_id': address.id,
        'items': [
            {
                'menu_item_id': menu_item.id,
                'quantity': 3,
                'add_ons': [ketchup.id]
            }
        ]
    }
    test_promotion_isolated('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ—Ç—á—É–ø', order_data)

    print_step('EC8', 'FREE_ADDON: –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è')
    # –ó–∞–∫–∞–∑ —Å –ø–ª–∞—Ç–Ω—ã–º –∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º –∫–µ—Ç—á—É–ø–æ–º
    test_promotion_isolated('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ—Ç—á—É–ø', order_data)

    print_step('EC9', '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∞–∫—Ü–∏–π: –∑–∞–∫–∞–∑ –±–µ–∑ –∞–∫—Ü–∏–∏')
    # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –∞–∫—Ü–∏–∏
    Promotion.objects.update(is_active=False)
    order_data = {
        'telegram_id': user.telegram_id,
        'address_id': address.id,
        'items': [
            {
                'menu_item_id': menu_item.id,
                'quantity': 1,
                'size_option_id': small_size.id
            }
        ]
    }
    print('–û–∂–∏–¥–∞–µ–º: –∑–∞–∫–∞–∑ –±–µ–∑ –∞–∫—Ü–∏–∏, —Å—á–µ—Ç—á–∏–∫–∏ –Ω–µ —É–≤–µ–ª–∏—á–∏–≤–∞—é—Ç—Å—è')
    test_promotion_isolated('–°–∫–∏–¥–∫–∞ 10%', order_data, expected_usage_increase=0)
    Promotion.objects.update(is_active=True)

    print_step('EC10', '–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–∫—Ü–∏—é')
    try:
        test_promotion_isolated('–ù–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∞–∫—Ü–∏—è', order_data, expected_usage_increase=0)
    except Exception as e:
        print_result(True, f'–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –æ—à–∏–±–∫–∞: {e}')

def main():
    print("–ü–†–û–í–ï–†–ö–ê –ê–ö–¶–ò–ô –° –ò–ó–û–õ–ò–†–û–í–ê–ù–ù–´–ú –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï–ú")
    print("=" * 80)
    
    # 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    print_step(1, "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user, address, category, small_size, large_size, ketchup, cheese_sauce, menu_item, promo_percent, promo_free_delivery, promo_free_addon = create_test_data()
    
    # 2. –¢–µ—Å—Ç –∞–∫—Ü–∏–∏ "–°–∫–∏–¥–∫–∞ 10%"
    print_step(2, "–¢–µ—Å—Ç –∞–∫—Ü–∏–∏ '–°–∫–∏–¥–∫–∞ 10%'")
    
    percent_order_data = {
        'telegram_id': user.telegram_id,
        'address_id': address.id,
        'items': [
            {
                'menu_item_id': menu_item.id,
                'quantity': 1,
                'size_option_id': small_size.id,
                'add_ons': [ketchup.id]
            }
        ]
    }
    
    test_promotion_isolated('–°–∫–∏–¥–∫–∞ 10%', percent_order_data)
    
    # 3. –¢–µ—Å—Ç –∞–∫—Ü–∏–∏ "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞"
    print_step(3, "–¢–µ—Å—Ç –∞–∫—Ü–∏–∏ '–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'")
    
    free_delivery_order_data = {
        'telegram_id': user.telegram_id,
        'address_id': address.id,
        'items': [
            {
                'menu_item_id': menu_item.id,
                'quantity': 2,  # 50 000 * 2 = 100 000 (–¥–æ—Å—Ç–∏–≥–∞–µ—Ç min_order_amount)
                'size_option_id': large_size.id,
                'add_ons': [ketchup.id, cheese_sauce.id]
            }
        ]
    }
    
    test_promotion_isolated('–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞', free_delivery_order_data)
    
    # 4. –¢–µ—Å—Ç –∞–∫—Ü–∏–∏ "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ—Ç—á—É–ø"
    print_step(4, "–¢–µ—Å—Ç –∞–∫—Ü–∏–∏ '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ—Ç—á—É–ø'")
    
    free_addon_order_data = {
        'telegram_id': user.telegram_id,
        'address_id': address.id,
        'items': [
            {
                'menu_item_id': menu_item.id,
                'quantity': 1,
                'add_ons': [ketchup.id]
            }
        ]
    }
    
    test_promotion_isolated('–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ—Ç—á—É–ø', free_addon_order_data)
    
    # 5. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö —Å—á–µ—Ç—á–∏–∫–æ–≤
    print_step(5, "–§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ü–∏–π
        promo_percent = retry_on_db_lock(lambda: Promotion.objects.get(name='–°–∫–∏–¥–∫–∞ 10%'))
        promo_free_delivery = retry_on_db_lock(lambda: Promotion.objects.get(name='–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞'))
        promo_free_addon = retry_on_db_lock(lambda: Promotion.objects.get(name='–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –∫–µ—Ç—á—É–ø'))
        
        print(f"üìä –ò—Ç–æ–≥–æ–≤—ã–µ —Å—á–µ—Ç—á–∏–∫–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–π:")
        print(f"   - '{promo_percent.name}': {promo_percent.usage_count}")
        print(f"   - '{promo_free_delivery.name}': {promo_free_delivery.usage_count}")
        print(f"   - '{promo_free_addon.name}': {promo_free_addon.usage_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å
        all_increased = (promo_percent.usage_count > 0 and 
                        promo_free_delivery.usage_count > 0 and 
                        promo_free_addon.usage_count > 0)
        
        print_result(all_increased, "–í—Å–µ —Å—á–µ—Ç—á–∏–∫–∏ –∞–∫—Ü–∏–π —É–≤–µ–ª–∏—á–∏–ª–∏—Å—å")
        
    except Exception as e:
        print_result(False, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—á–µ—Ç—á–∏–∫–æ–≤: {str(e)}")
    
    # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    print_step(6, "–ü—Ä–æ–≤–µ—Ä–∫–∞ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏")
    
    try:
        # –¢–µ—Å—Ç API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ö–∏—Ç–æ–≤
        response = requests.get('http://localhost:8000/api/menu-items/?is_hit=true')
        if response.status_code == 200:
            items = response.json()
            print_result(True, f"API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ö–∏—Ç–æ–≤ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(items)} –±–ª—é–¥")
        else:
            print_result(False, f"–û—à–∏–±–∫–∞ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ö–∏—Ç–æ–≤: {response.status_code}")
    except Exception as e:
        print_result(False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ö–∏—Ç–æ–≤: {str(e)}")
    
    try:
        # –¢–µ—Å—Ç API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–∏–Ω–æ–∫
        response = requests.get('http://localhost:8000/api/menu-items/?is_new=true')
        if response.status_code == 200:
            items = response.json()
            print_result(True, f"API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–∏–Ω–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–∞–π–¥–µ–Ω–æ {len(items)} –±–ª—é–¥")
        else:
            print_result(False, f"–û—à–∏–±–∫–∞ API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–æ–≤–∏–Ω–æ–∫: {response.status_code}")
    except Exception as e:
        print_result(False, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å API —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–æ–≤–∏–Ω–æ–∫: {str(e)}")
    
    # –ü–æ—Å–ª–µ –≤—Å–µ—Ö –æ–±—ã—á–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤:
    test_edge_cases(user, address, small_size, large_size, ketchup, cheese_sauce, menu_item)

    print_step(7, "–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞")
    print_result(True, "–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ.")

if __name__ == "__main__":
    main() 