#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import os
import sys
import subprocess
import time
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def fix_database():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    try:
        # –û—á–∏—â–∞–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        result = subprocess.run([
            sys.executable, 'clear_database.py'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
            return True
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            print(result.stderr)
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def test_django_endpoints():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç Django endpoints"""
    print("\nüåê –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DJANGO ENDPOINTS")
    print("=" * 50)
    
    import requests
    import time
    
    endpoints = [
        ("http://localhost:8000/admin/", "Admin –ø–∞–Ω–µ–ª—å", "GET"),
        ("http://localhost:8000/api/menu/", "API –º–µ–Ω—é", "GET"),
        ("http://localhost:8000/api/auth/", "API –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "GET"),
        ("http://localhost:8000/api/categories/", "API –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", "GET"),
    ]
    
    all_ok = True
    for url, name, method in endpoints:
        try:
            if method == "GET":
                response = requests.get(url, timeout=5)
            else:
                response = requests.post(url, json={}, timeout=5)
            
            if response.status_code in [200, 302, 403]:
                print(f"‚úÖ {name}: {response.status_code}")
            else:
                print(f"‚ùå {name}: {response.status_code}")
                if response.status_code == 500:
                    print(f"   –û—à–∏–±–∫–∞: {response.text[:200]}")
                all_ok = False
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {name}: {e}")
            all_ok = False
    
    return all_ok

def test_webhook():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç webhook –æ—Ç–¥–µ–ª—å–Ω–æ"""
    print("\nüîó –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï WEBHOOK")
    print("=" * 50)
    
    import requests
    import time
    
    webhook_url = "http://localhost:8000/api/webhook/"
    
    # –ö–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è webhook
    webhook_data = {
        "update_id": 123456789,
        "message": {
            "message_id": 1,
            "from": {
                "id": 123456789,
                "is_bot": False,
                "first_name": "Test",
                "username": "testuser"
            },
            "chat": {
                "id": 123456789,
                "first_name": "Test",
                "username": "testuser",
                "type": "private"
            },
            "date": int(time.time()),
            "text": "/start"
        }
    }
    
    try:
        response = requests.post(webhook_url, json=webhook_data, timeout=5)
        if response.status_code in [200, 400, 401]:
            print(f"‚úÖ Webhook: {response.status_code}")
            if response.status_code == 400:
                print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
            return True
        else:
            print(f"‚ùå Webhook: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ webhook: {e}")
        return False

def test_bot_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–æ—Ç—É"""
    print("\nü§ñ –¢–ï–°–¢ –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö –ë–û–¢–£")
    print("=" * 50)
    
    import requests
    
    bot_token = os.getenv('BOT_TOKEN')
    if not bot_token or bot_token == 'your_bot_token_here':
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    
    try:
        response = requests.get(f"https://api.telegram.org/bot{bot_token}/getMe")
        if response.status_code == 200:
            bot_info = response.json()
            print(f"‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: @{bot_info['result']['username']}")
            print(f"   ID: {bot_info['result']['id']}")
            print(f"   –ò–º—è: {bot_info['result']['first_name']}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        return False

def send_test_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    print("\nüì§ –û–¢–ü–†–ê–í–ö–ê –¢–ï–°–¢–û–í–û–ì–û –°–û–û–ë–©–ï–ù–ò–Ø")
    print("=" * 50)
    
    import requests
    
    bot_token = os.getenv('BOT_TOKEN')
    chat_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞): ").strip()
    
    if not chat_id:
        print("‚è≠Ô∏è  –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return True
    
    try:
        message_data = {
            'chat_id': chat_id,
            'text': 'üß™ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç StreetBurger Bot!\n\n‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!'
        }
        
        response = requests.post(
            f"https://api.telegram.org/bot{bot_token}/sendMessage",
            json=message_data
        )
        
        if response.status_code == 200:
            print("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´")
    print("=" * 50)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not fix_database():
        print("\n‚ùå –û—à–∏–±–∫–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º Django endpoints
    if not test_django_endpoints():
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å Django endpoints")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook
    if not test_webhook():
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å webhook")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –±–æ—Ç–∞
    if not test_bot_connection():
        print("\n‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –±–æ—Ç–æ–º")
        return False
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    send_test_message()
    
    print("\nüéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    print("üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print("   ‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
    print("   ‚úÖ Django endpoints —Ä–∞–±–æ—Ç–∞—é—Ç")
    print("   ‚úÖ Webhook —Ä–∞–±–æ—Ç–∞–µ—Ç")
    print("   ‚úÖ –ë–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω")
    
    print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é!")
    print("ü§ñ –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start")
    
    return True

if __name__ == '__main__':
    main() 