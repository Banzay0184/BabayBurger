#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã StreetBurger
"""
import os
import sys
import subprocess
import time
import signal
import threading
from pathlib import Path

def check_redis():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Redis"""
    try:
        import redis
        r = redis.Redis(host='localhost', port=6379, db=0)
        r.ping()
        print("‚úÖ Redis –¥–æ—Å—Ç—É–ø–µ–Ω")
        return True
    except Exception as e:
        print(f"‚ùå Redis –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {str(e)}")
        return False

def start_redis():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Redis –µ—Å–ª–∏ –æ–Ω –Ω–µ –∑–∞–ø—É—â–µ–Ω"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ Redis
        result = subprocess.run(['redis-cli', 'ping'], 
                              capture_output=True, text=True, timeout=5)
        if result.returncode == 0 and 'PONG' in result.stdout:
            print("‚úÖ Redis —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return True
    except:
        pass
    
    print("üîÑ –ó–∞–ø—É—Å–∫ Redis...")
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis —á–µ—Ä–µ–∑ brew (macOS)
        subprocess.run(['brew', 'services', 'start', 'redis'], 
                      capture_output=True, timeout=10)
        time.sleep(2)
        
        if check_redis():
            return True
    except:
        pass
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis —á–µ—Ä–µ–∑ systemctl (Linux)
        subprocess.run(['sudo', 'systemctl', 'start', 'redis-server'], 
                      capture_output=True, timeout=10)
        time.sleep(2)
        
        if check_redis():
            return True
    except:
        pass
    
    print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis")
    print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ Redis –≤—Ä—É—á–Ω—É—é:")
    print("   macOS: brew services start redis")
    print("   Linux: sudo systemctl start redis-server")
    return False

def start_celery_worker():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Celery worker"""
    print("üîÑ –ó–∞–ø—É—Å–∫ Celery worker...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Celery worker –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        process = subprocess.Popen([
            sys.executable, 'start_celery.py'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        time.sleep(3)
        
        if process.poll() is None:
            print("‚úÖ Celery worker –∑–∞–ø—É—â–µ–Ω")
            return process
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Celery worker")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Celery: {str(e)}")
        return None

def start_django_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Django —Å–µ—Ä–≤–µ—Ä"""
    print("üîÑ –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º Django —Å–µ—Ä–≤–µ—Ä
        process = subprocess.Popen([
            sys.executable, 'manage.py', 'runserver', '0.0.0.0:8000'
        ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞
        time.sleep(3)
        
        if process.poll() is None:
            print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            return process
        else:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Django —Å–µ—Ä–≤–µ—Ä")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Django: {str(e)}")
        return None

def test_system():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...")
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º Celery
        result = subprocess.run([
            sys.executable, 'test_celery.py'
        ], capture_output=True, text=True, timeout=30)
        
        if result.returncode == 0:
            print("‚úÖ Celery —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            print("‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å Celery")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

def cleanup(processes):
    """–û—á–∏—â–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏"""
    print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    
    for process in processes:
        if process and process.poll() is None:
            try:
                process.terminate()
                process.wait(timeout=5)
            except:
                process.kill()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã StreetBurger")
    print("=" * 50)
    
    processes = []
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º Redis
        if not check_redis():
            if not start_redis():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                return
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Celery worker
        celery_process = start_celery_worker()
        if celery_process:
            processes.append(celery_process)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Django —Å–µ—Ä–≤–µ—Ä
        django_process = start_django_server()
        if django_process:
            processes.append(django_process)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
        test_system()
        
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üì± API –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:8000/api/")
        print("üîß –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: http://localhost:8000/admin/")
        print("üìä Celery –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: celery -A config inspect stats")
        print("\nüí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while True:
                time.sleep(1)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å—ã –µ—â–µ —Ä–∞–±–æ—Ç–∞—é—Ç
                for process in processes:
                    if process.poll() is not None:
                        print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
        except KeyboardInterrupt:
            pass
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã: {str(e)}")
    finally:
        cleanup(processes)
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

if __name__ == "__main__":
    main() 