#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from api.models import Category, MenuItem, AddOn, Promotion, DeliveryZone
from decimal import Decimal

def add_test_data():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
    print("üîß –î–û–ë–ê–í–õ–ï–ù–ò–ï –¢–ï–°–¢–û–í–´–• –î–ê–ù–ù–´–•")
    print("=" * 50)
    
    # 1. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("\nüìÇ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...")
    
    categories_data = [
        {"name": "–ù–∞–ø–∏—Ç–∫–∏", "description": "–•–æ–ª–æ–¥–Ω—ã–µ –∏ –≥–æ—Ä—è—á–∏–µ –Ω–∞–ø–∏—Ç–∫–∏"},
        {"name": "–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è", "description": "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã"},
    ]
    
    for cat_data in categories_data:
        category, created = Category.objects.get_or_create(
            name=cat_data["name"],
            defaults=cat_data
        )
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category.name}")
        else:
            print(f"‚ÑπÔ∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {category.name}")
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    print("\nü•§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–π...")
    
    addons_data = [
        {"name": "–ö–æ–∫–∞-–ö–æ–ª–∞", "price": Decimal("8000")},
        {"name": "–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏", "price": Decimal("12000")},
        {"name": "–ß–∏–ø—Å—ã", "price": Decimal("15000")},
        {"name": "–ú–æ—Ä—Å", "price": Decimal("10000")},
        {"name": "–ß–∞–π", "price": Decimal("5000")},
        {"name": "–ö–æ—Ñ–µ", "price": Decimal("8000")},
    ]
    
    for addon_data in addons_data:
        addon, created = AddOn.objects.get_or_create(
            name=addon_data["name"],
            defaults=addon_data
        )
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: {addon.name} - {addon.price}")
        else:
            print(f"‚ÑπÔ∏è  –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {addon.name}")
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∞–∫—Ü–∏–∏
    print("\nüéâ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–∫—Ü–∏–π...")
    
    from datetime import timedelta
    from django.utils import timezone
    
    promotions_data = [
                       {
                   "name": "–°–∫–∏–¥–∫–∞ 5000 —Å—É–º",
                   "description": "–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞ 5000 —Å—É–º –Ω–∞ –∑–∞–∫–∞–∑ –æ—Ç 50000 —Å—É–º",
                   "discount_type": "FIXED_AMOUNT",
                   "discount_value": Decimal("5000"),
                   "min_order_amount": Decimal("50000"),
                   "is_active": True,
                   "valid_from": timezone.now(),
                   "valid_to": timezone.now() + timedelta(days=30)
               },
               {
                   "name": "–°–∫–∏–¥–∫–∞ 15%",
                   "description": "–°–∫–∏–¥–∫–∞ 15% –Ω–∞ –≤—Å–µ –±–ª—é–¥–∞",
                   "discount_type": "PERCENT",
                   "discount_value": Decimal("15"),
                   "is_active": True,
                   "valid_from": timezone.now(),
                   "valid_to": timezone.now() + timedelta(days=30)
               },
               {
                   "name": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞",
                   "description": "–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 100000 —Å—É–º",
                   "discount_type": "FREE_DELIVERY",
                   "discount_value": Decimal("0"),  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è FREE_DELIVERY
                   "min_order_amount": Decimal("100000"),
                   "is_active": True,
                   "valid_from": timezone.now(),
                   "valid_to": timezone.now() + timedelta(days=30)
               },
                       {
                   "name": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫",
                   "description": "–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 80000 —Å—É–º",
                   "discount_type": "FREE_ITEM",
                   "discount_value": Decimal("0"),  # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è FREE_ITEM
                   "min_order_amount": Decimal("80000"),
                   "is_active": True,
                   "valid_from": timezone.now(),
                   "valid_to": timezone.now() + timedelta(days=30)
               }
    ]
    
    for promo_data in promotions_data:
        promotion, created = Promotion.objects.get_or_create(
            name=promo_data["name"],
            defaults=promo_data
        )
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∞–∫—Ü–∏—è: {promotion.name}")
        else:
            print(f"‚ÑπÔ∏è  –ê–∫—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {promotion.name}")
    
    # 4. –î–æ–±–∞–≤–ª—è–µ–º –±–ª—é–¥–∞ –≤ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    print("\nüçî –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª—é–¥ –≤ –Ω–æ–≤—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    drinks_category = Category.objects.get(name="–ù–∞–ø–∏—Ç–∫–∏")
    additions_category = Category.objects.get(name="–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è")
    
    menu_items_data = [
        {
            "name": "–ö–æ–∫–∞-–ö–æ–ª–∞",
            "description": "–ì–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ Coca-Cola",
            "price": Decimal("8000"),
            "category": drinks_category
        },
        {
            "name": "–ü–µ–ø—Å–∏",
            "description": "–ì–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ Pepsi",
            "price": Decimal("8000"),
            "category": drinks_category
        },
        {
            "name": "–§–∞–Ω—Ç–∞",
            "description": "–ì–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞–ø–∏—Ç–æ–∫ Fanta",
            "price": Decimal("8000"),
            "category": drinks_category
        },
        {
            "name": "–ö–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏",
            "description": "–ñ–∞—Ä–µ–Ω–∞—è –∫–∞—Ä—Ç–æ—à–∫–∞ —Ñ—Ä–∏",
            "price": Decimal("12000"),
            "category": additions_category
        },
        {
            "name": "–ß–∏–ø—Å—ã",
            "description": "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω—ã–µ —á–∏–ø—Å—ã",
            "price": Decimal("15000"),
            "category": additions_category
        },
        {
            "name": "–ù–∞–≥–≥–µ—Ç—Å—ã",
            "description": "–ö—É—Ä–∏–Ω—ã–µ –Ω–∞–≥–≥–µ—Ç—Å—ã",
            "price": Decimal("18000"),
            "category": additions_category
        }
    ]
    
    for item_data in menu_items_data:
        menu_item, created = MenuItem.objects.get_or_create(
            name=item_data["name"],
            category=item_data["category"],
            defaults=item_data
        )
        if created:
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –±–ª—é–¥–æ: {menu_item.name} - {menu_item.price}")
        else:
            print(f"‚ÑπÔ∏è  –ë–ª—é–¥–æ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {menu_item.name}")
    
    # 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    print("\nüöö –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏...")
    
    zones = DeliveryZone.objects.filter(is_active=True)
    if zones.exists():
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏: {zones.count()}")
        for zone in zones:
            print(f"   - {zone.name} ({zone.city})")
    else:
        print("‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏")
    
    # 6. –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print("\nüìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {Category.objects.count()}")
    print(f"üçî –ë–ª—é–¥: {MenuItem.objects.count()}")
    print(f"ü•§ –î–æ–ø–æ–ª–Ω–µ–Ω–∏–π: {AddOn.objects.count()}")
    print(f"üéâ –ê–∫—Ü–∏–π: {Promotion.objects.count()}")
    print(f"üöö –ó–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏: {DeliveryZone.objects.count()}")
    
    print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üéØ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å —Ç–µ—Å—Ç—ã —Å –ø–æ–ª–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏")
if __name__ == "__main__":
    add_test_data() 