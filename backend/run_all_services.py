#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
"""

import os
import sys
import subprocess
import time
import signal
import threading
from pathlib import Path
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

class ServiceManager:
    def __init__(self):
        self.processes = []
        self.running = True
        
    def start_django(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Django —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞...")
        try:
            process = subprocess.Popen([
                sys.executable, 'manage.py', 'runserver', '0.0.0.0:8000'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.processes.append(('Django', process))
            print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
            return True
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Django: {e}")
            return False
    
    def start_celery(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Celery worker"""
        print("üîÑ –ó–∞–ø—É—Å–∫ Celery worker...")
        try:
            process = subprocess.Popen([
                'celery', '-A', 'config', 'worker', '-l', 'info'
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            self.processes.append(('Celery', process))
            print("‚úÖ Celery worker –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Celery: {e}")
            print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Redis –∑–∞–ø—É—â–µ–Ω")
            return False
    
    def wait_for_django(self, timeout=30):
        """–ñ–¥–µ—Ç, –ø–æ–∫–∞ Django —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤"""
        print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Django —Å–µ—Ä–≤–µ—Ä–∞...")
        start_time = time.time()
        
        while time.time() - start_time < timeout:
            try:
                import requests
                response = requests.get("http://localhost:8000/admin/", timeout=2)
                if response.status_code in [200, 302, 403]:
                    print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä –≥–æ—Ç–æ–≤!")
                    return True
            except:
                pass
            time.sleep(1)
        
        print("‚ùå Django —Å–µ—Ä–≤–µ—Ä –Ω–µ –≥–æ—Ç–æ–≤ –∑–∞ –æ—Ç–≤–µ–¥–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è")
        return False
    
    def setup_webhook(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook"""
        print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook...")
        try:
            result = subprocess.run([
                sys.executable, 'setup_ngrok_webhook.py'
            ], capture_output=True, text=True, timeout=60)
            
            if result.returncode == 0:
                print("‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True
            else:
                print("‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook")
                print(result.stderr)
                return False
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook: {e}")
            return False
    
    def check_services(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("\nüìä –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Django
        try:
            import requests
            response = requests.get("http://localhost:8000/admin/", timeout=5)
            if response.status_code in [200, 302, 403]:
                print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä: –†–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ùå Django —Å–µ—Ä–≤–µ—Ä: –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        except:
            print("‚ùå Django —Å–µ—Ä–≤–µ—Ä: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º ngrok
        try:
            response = requests.get("http://localhost:4040/api/tunnels", timeout=5)
            if response.status_code == 200:
                tunnels = response.json()['tunnels']
                if tunnels:
                    ngrok_url = tunnels[0]['public_url']
                    print(f"‚úÖ Ngrok: {ngrok_url}")
                else:
                    print("‚ùå Ngrok: –¢—É–Ω–Ω–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print("‚ùå Ngrok: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except:
            print("‚ùå Ngrok: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Celery
        try:
            result = subprocess.run([
                'celery', '-A', 'config', 'inspect', 'ping'
            ], capture_output=True, text=True, timeout=5)
            if result.returncode == 0:
                print("‚úÖ Celery: –†–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ö†Ô∏è  Celery: –ù–µ –æ—Ç–≤–µ—á–∞–µ—Ç")
        except:
            print("‚ö†Ô∏è  Celery: –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    
    def stop_all(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤...")
        for name, process in self.processes:
            try:
                process.terminate()
                process.wait(timeout=5)
                print(f"‚úÖ {name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except:
                try:
                    process.kill()
                    print(f"‚ö†Ô∏è  {name} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                except:
                    pass
    
    def signal_handler(self, signum, frame):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        self.running = False
        self.stop_all()
        sys.exit(0)
    
    def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –°–ï–†–í–ò–°–û–í")
        print("=" * 50)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        signal.signal(signal.SIGINT, self.signal_handler)
        signal.signal(signal.SIGTERM, self.signal_handler)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º .env —Ñ–∞–π–ª
        env_file = Path('.env')
        if not env_file.exists():
            print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ env_example.txt")
            return False
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º BOT_TOKEN
        bot_token = os.getenv('BOT_TOKEN')
        if not bot_token or bot_token == 'your_bot_token_here':
            print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
            print("üí° –î–æ–±–∞–≤—å—Ç–µ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ .env —Ñ–∞–π–ª")
            return False
        
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Django
        if not self.start_django():
            return False
        
        # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Django
        if not self.wait_for_django():
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º Celery –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        def start_celery_thread():
            self.start_celery()
        
        celery_thread = threading.Thread(target=start_celery_thread)
        celery_thread.daemon = True
        celery_thread.start()
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Celery
        time.sleep(3)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
        if not self.setup_webhook():
            print("‚ö†Ô∏è  Webhook –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
        self.check_services()
        
        print("\nüéâ –°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞!")
        print("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:")
        print("   üè† –õ–æ–∫–∞–ª—å–Ω—ã–π —Å–µ—Ä–≤–µ—Ä: http://localhost:8000")
        print("   üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å: http://localhost:8000/admin/")
        print("   üìä Ngrok –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: http://localhost:4040")
        
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–æ—Ç–∞:")
        print("   1. –û—Ç–∫—Ä–æ–π—Ç–µ –±–æ—Ç–∞ –≤ Telegram")
        print("   2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")
        print("   3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –æ—Ç–≤–µ—Ç –±–æ—Ç–∞")
        
        print("\nüîÑ –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            while self.running:
                time.sleep(1)
        except KeyboardInterrupt:
            pass
        finally:
            self.stop_all()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    manager = ServiceManager()
    try:
        manager.run()
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        manager.stop_all()

if __name__ == '__main__':
    main() 