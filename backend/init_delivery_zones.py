#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
–°–æ–∑–¥–∞–µ—Ç –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ë—É—Ö–∞—Ä—ã –∏ –ö–∞–≥–∞–Ω–∞ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from api.models import DeliveryZone

def init_delivery_zones():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ë—É—Ö–∞—Ä—ã –∏ –ö–∞–≥–∞–Ω–∞"""
    print("üó∫Ô∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏...")
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
    DeliveryZone.objects.all().delete()
    print("   ‚úÖ –£–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏")
    
    # –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ë—É—Ö–∞—Ä—ã
    bukhara_zone = DeliveryZone.objects.create(
        name="–ë—É—Ö–∞—Ä–∞ - –¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞",
        city="–ë—É—Ö–∞—Ä–∞",
        center_latitude=39.7747,
        center_longitude=64.4286,
        radius_km=20.0,
        is_active=True
    )
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {bukhara_zone}")
    print(f"      –¶–µ–Ω—Ç—Ä: {bukhara_zone.center_latitude}, {bukhara_zone.center_longitude}")
    print(f"      –†–∞–¥–∏—É—Å: {bukhara_zone.radius_km} –∫–º")
    
    # –ó–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –ö–∞–≥–∞–Ω–∞
    kagan_zone = DeliveryZone.objects.create(
        name="–ö–∞–≥–∞–Ω - –¶–µ–Ω—Ç—Ä –≥–æ—Ä–æ–¥–∞",
        city="–ö–∞–≥–∞–Ω",
        center_latitude=39.7167,
        center_longitude=64.5500,
        radius_km=10.0,
        is_active=True
    )
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {kagan_zone}")
    print(f"      –¶–µ–Ω—Ç—Ä: {kagan_zone.center_latitude}, {kagan_zone.center_longitude}")
    print(f"      –†–∞–¥–∏—É—Å: {kagan_zone.radius_km} –∫–º")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–æ–Ω–∞ –¥–ª—è –ë—É—Ö–∞—Ä—ã (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è)
    bukhara_extended = DeliveryZone.objects.create(
        name="–ë—É—Ö–∞—Ä–∞ - –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∑–æ–Ω–∞",
        city="–ë—É—Ö–∞—Ä–∞",
        center_latitude=39.7747,
        center_longitude=64.4286,
        radius_km=30.0,
        is_active=True
    )
    print(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∑–æ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {bukhara_extended}")
    print(f"      –¶–µ–Ω—Ç—Ä: {bukhara_extended.center_latitude}, {bukhara_extended.center_longitude}")
    print(f"      –†–∞–¥–∏—É—Å: {bukhara_extended.radius_km} –∫–º")
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
    print(f"   –í—Å–µ–≥–æ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏: {DeliveryZone.objects.count()}")
    print(f"   –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–æ–Ω: {DeliveryZone.objects.filter(is_active=True).count()}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã
    print(f"\nüìç –°–æ–∑–¥–∞–Ω–Ω—ã–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏:")
    for zone in DeliveryZone.objects.all():
        print(f"   - {zone.name} ({zone.city}): —Ä–∞–¥–∏—É—Å {zone.radius_km} –∫–º")
        print(f"     –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {zone.center_latitude}, {zone.center_longitude}")
        print(f"     –°—Ç–∞—Ç—É—Å: {'–ê–∫—Ç–∏–≤–Ω–∞' if zone.is_active else '–ù–µ–∞–∫—Ç–∏–≤–Ω–∞'}")
        print()
    
    print("‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

def test_coordinates():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏...")
    
    from api.models import calculate_distance
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∞–¥—Ä–µ—Å–∞
    test_addresses = [
        {
            "name": "–¶–µ–Ω—Ç—Ä –ë—É—Ö–∞—Ä—ã",
            "lat": 39.7747,
            "lon": 64.4286,
            "city": "–ë—É—Ö–∞—Ä–∞"
        },
        {
            "name": "–¶–µ–Ω—Ç—Ä –ö–∞–≥–∞–Ω–∞",
            "lat": 39.7167,
            "lon": 64.5500,
            "city": "–ö–∞–≥–∞–Ω"
        },
        {
            "name": "–¢–∞—à–∫–µ–Ω—Ç (–≤–Ω–µ –∑–æ–Ω—ã)",
            "lat": 41.2995,
            "lon": 69.2401,
            "city": "–¢–∞—à–∫–µ–Ω—Ç"
        }
    ]
    
    for address in test_addresses:
        print(f"\nüìç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞: {address['name']}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞
        zones = DeliveryZone.objects.filter(city=address['city'], is_active=True)
        
        if not zones.exists():
            print(f"   ‚ùå –ù–µ—Ç –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –≥–æ—Ä–æ–¥–∞: {address['city']}")
            continue
        
        for zone in zones:
            distance = zone.get_distance_to_zone(address['lat'], address['lon'])
            is_in_zone = zone.is_address_in_zone(address['lat'], address['lon'])
            
            print(f"   –ó–æ–Ω–∞: {zone.name}")
            print(f"   –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ —Ü–µ–Ω—Ç—Ä–∞: {distance:.1f} –∫–º")
            print(f"   –í –∑–æ–Ω–µ –¥–æ—Å—Ç–∞–≤–∫–∏: {is_in_zone}")
            print(f"   –†–∞–¥–∏—É—Å –∑–æ–Ω—ã: {zone.radius_km} –∫–º")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è StreetBurger")
    print("=" * 50)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        init_delivery_zones()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        test_coordinates()
        
        print("\nüéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    main() 