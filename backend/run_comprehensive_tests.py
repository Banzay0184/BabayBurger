#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏
"""

import os
import sys
import time
import subprocess
from datetime import datetime

def run_command(command, description):
    """–ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥—ã —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""
    print(f"\nüîÑ {description}")
    print(f"–ö–æ–º–∞–Ω–¥–∞: {command}")
    print("-" * 50)
    
    start_time = time.time()
    try:
        result = subprocess.run(
            command, 
            shell=True, 
            capture_output=True, 
            text=True,
            cwd=os.path.dirname(os.path.abspath(__file__))
        )
        duration = time.time() - start_time
        
        if result.returncode == 0:
            print(f"‚úÖ {description} - –£–°–ü–ï–®–ù–û ({duration:.2f}s)")
            if result.stdout:
                print("–í—ã–≤–æ–¥:")
                print(result.stdout)
            return True
        else:
            print(f"‚ùå {description} - –ü–†–û–í–ê–õ–ï–ù ({duration:.2f}s)")
            print("–û—à–∏–±–∫–∞:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå {description} - –û–®–ò–ë–ö–ê: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤"""
    print("üß™ –ö–û–ú–ü–õ–ï–ö–°–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´ –î–û–°–¢–ê–í–ö–ò")
    print("=" * 60)
    print(f"–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤
    test_results = {
        'database_migrations': False,
        'create_test_data': False,
        'comprehensive_system_test': False,
        'api_integration_test': False,
        'django_tests': False
    }
    
    # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    test_results['database_migrations'] = run_command(
        "python manage.py migrate",
        "–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    )
    
    # 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    test_results['create_test_data'] = run_command(
        "python manage.py create_test_operators --clear",
        "–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏"
    )
    
    # 3. –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç
    test_results['comprehensive_system_test'] = run_command(
        "python comprehensive_system_test.py",
        "–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π —Ç–µ—Å—Ç"
    )
    
    # 4. –ó–∞–ø—É—Å–∫–∞–µ–º API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã
    test_results['api_integration_test'] = run_command(
        "python api_integration_test.py",
        "API –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã"
    )
    
    # 5. –ó–∞–ø—É—Å–∫–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Django —Ç–µ—Å—Ç—ã
    test_results['django_tests'] = run_command(
        "python manage.py test app_operator api --verbosity=2",
        "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ Django —Ç–µ—Å—Ç—ã"
    )
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ï –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    passed_tests = sum(test_results.values())
    total_tests = len(test_results)
    
    for test_name, result in test_results.items():
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name.replace('_', ' ').title()}: {status}")
    
    print(f"\n–û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed_tests}/{total_tests} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed_tests == total_tests:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω—É")
        sys.exit(0)
    else:
        print(f"\n‚ö†Ô∏è  –ü–†–û–í–ê–õ–ï–ù–û {total_tests - passed_tests} –¢–ï–°–¢–û–í")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ—à–∏–±–æ–∫")
        sys.exit(1)

if __name__ == "__main__":
    main() 