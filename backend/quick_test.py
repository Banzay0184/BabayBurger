#!/usr/bin/env python3
"""
–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π StreetBurger Mini App
"""

import requests
import json
from datetime import datetime

def quick_test_fixed():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    base_url = "http://localhost:8000"
    
    print("üöÄ –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ë–´–°–¢–†–´–ô –¢–ï–°–¢ STREETBURGER MINI APP")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S')}")
    print(f"üåê URL: {base_url}")
    
    tests = [
        ("–ú–µ–Ω—é", "/api/menu/", "GET"),
        ("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "/api/categories/", "GET"),
        ("–î–æ–ø–æ–ª–Ω–µ–Ω–∏—è", "/api/add-ons/", "GET"),
        ("–ê–∫—Ü–∏–∏", "/api/promotions/", "GET"),
        ("–ó–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏", "/api/delivery-zones/", "GET"),
        ("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "/api/auth/", "GET"),
        ("–ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ", "/api/geocode/?query=–ë—É—Ö–∞—Ä–∞", "GET"),
        ("–ó–∞–∫–∞–∑—ã", "/api/orders/", "GET"),
        ("–ê–¥—Ä–µ—Å–∞", "/api/addresses/", "GET"),
        ("Webhook", "/api/webhook/", "GET"),
    ]
    
    results = []
    
    for name, endpoint, method in tests:
        try:
            if method == "GET":
                response = requests.get(f"{base_url}{endpoint}", timeout=5)
            else:
                response = requests.post(f"{base_url}{endpoint}", timeout=5)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å —Ç–µ—Å—Ç–∞
            if response.status_code == 200:
                status = "‚úÖ"
                success = True
            elif response.status_code in [400, 405]:  # –û–∂–∏–¥–∞–µ–º—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö endpoints
                status = "‚ö†Ô∏è"
                success = True
            else:
                status = "‚ùå"
                success = False
            
            print(f"{status} {name} - {response.status_code}")
            
            if response.status_code == 200:
                try:
                    data = response.json()
                    if isinstance(data, list):
                        count = len(data)
                    elif isinstance(data, dict):
                        if "categories" in data and "items" in data:
                            count = f"{len(data.get('categories', []))} –∫–∞—Ç., {len(data.get('items', []))} –±–ª—é–¥"
                        elif "items" in data:
                            count = len(data.get("items", []))
                        else:
                            count = len(data)
                    else:
                        count = 0
                    print(f"   üìä –î–∞–Ω–Ω—ã—Ö: {count}")
                except:
                    print(f"   üìä –î–∞–Ω–Ω—ã—Ö: –ù–µ JSON")
            elif response.status_code in [400, 405]:
                print(f"   ‚ÑπÔ∏è  –û–∂–∏–¥–∞–µ–º–∞—è –æ—à–∏–±–∫–∞ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é)")
            
            results.append((name, success))
            
        except Exception as e:
            print(f"‚ùå {name} - –û—à–∏–±–∫–∞: {str(e)}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    passed = sum(1 for _, success in results if success)
    total = len(results)
    
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–ò:")
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {passed}/{total}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {total - passed}")
    print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç: {(passed/total)*100:.1f}%")
    
    if passed == total:
        print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
    elif passed >= total * 0.8:
        print("\n‚úÖ –ë–û–õ–¨–®–ò–ù–°–¢–í–û –¢–ï–°–¢–û–í –ü–†–û–ô–î–ï–ù–û!")
        print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("\n‚ö†Ô∏è  –ï–°–¢–¨ –ü–†–û–ë–õ–ï–ú–´!")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
    
    return passed == total

if __name__ == "__main__":
    quick_test_fixed() 