#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è StreetBurger Mini App
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å —Ç–æ—á–∫–∏ –∑—Ä–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
"""

import os
import sys
import subprocess
import time
import requests
from datetime import datetime

def check_django_server():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω –ª–∏ Django —Å–µ—Ä–≤–µ—Ä"""
    try:
        response = requests.get("http://localhost:8000/api/menu/", timeout=5)
        return response.status_code == 200
    except:
        return False

def start_django_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç Django —Å–µ—Ä–≤–µ—Ä"""
    print("üöÄ –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞...")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é backend
    os.chdir("backend")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ª–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    if not os.path.exists("venv"):
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        subprocess.run(["python", "-m", "venv", "venv"], check=True)
    
    # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    if os.name == "nt":  # Windows
        activate_script = "venv\\Scripts\\activate"
    else:  # Unix/Linux/MacOS
        activate_script = "venv/bin/activate"
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    subprocess.run([f"source {activate_script} && pip install -r requirements.txt"], 
                  shell=True, check=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
    print("üóÑÔ∏è  –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π...")
    subprocess.run([f"source {activate_script} && python manage.py migrate"], 
                  shell=True, check=True)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
    print("üåê –ó–∞–ø—É—Å–∫ Django —Å–µ—Ä–≤–µ—Ä–∞...")
    server_process = subprocess.Popen([
        f"source {activate_script} && python manage.py runserver 0.0.0.0:8000"
    ], shell=True)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    for i in range(30):  # –ñ–¥–µ–º –º–∞–∫—Å–∏–º—É–º 30 —Å–µ–∫—É–Ω–¥
        if check_django_server():
            print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            return server_process
        time.sleep(1)
        print(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {i+1}/30...")
    
    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Django —Å–µ—Ä–≤–µ—Ä")
    return None

def run_client_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–µ—Å—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞"""
    print("\nüß™ –ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ö–õ–ò–ï–ù–¢–ê")
    print("=" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    result = subprocess.run([sys.executable, "test_client_scenario.py"], 
                          capture_output=True, text=True)
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    print(result.stdout)
    if result.stderr:
        print("–û–®–ò–ë–ö–ò:")
        print(result.stderr)
    
    return result.returncode == 0

def run_specific_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã"""
    print("\nüéØ –°–ü–ï–¶–ò–§–ò–ß–ï–°–ö–ò–ï –¢–ï–°–¢–´")
    print("=" * 50)
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ API endpoints
    print("\nüì° –¢–µ—Å—Ç API endpoints...")
    endpoints = [
        "/api/menu/",
        "/api/categories/",
        "/api/add-ons/",
        "/api/promotions/",
        "/api/delivery-zones/",
        "/api/orders/",
        "/api/addresses/"
    ]
    
    for endpoint in endpoints:
        try:
            response = requests.get(f"http://localhost:8000{endpoint}", timeout=5)
            status = "‚úÖ" if response.status_code == 200 else "‚ùå"
            print(f"{status} {endpoint} - {response.status_code}")
        except Exception as e:
            print(f"‚ùå {endpoint} - –û—à–∏–±–∫–∞: {str(e)}")
    
    # –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüóÑÔ∏è  –¢–µ—Å—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    try:
        response = requests.get("http://localhost:8000/api/menu/", timeout=5)
        if response.status_code == 200:
            data = response.json()
            items_count = len(data.get("items", []))
            categories_count = len(data.get("categories", []))
            print(f"‚úÖ –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {items_count} –±–ª—é–¥, {categories_count} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –ë–î: {str(e)}")
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
    print("\nüìç –¢–µ—Å—Ç –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è...")
    try:
        test_address = "—É–ª. –õ–µ–Ω–∏–Ω–∞, 15, –ë—É—Ö–∞—Ä–∞"
        response = requests.post(
            "http://localhost:8000/api/geocode/",
            json={"address": test_address},
            timeout=10
        )
        if response.status_code == 200:
            print("‚úÖ –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞ –≥–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

def check_system_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"""
    print("üîç –ü–†–û–í–ï–†–ö–ê –°–ò–°–¢–ï–ú–ù–´–• –¢–†–ï–ë–û–í–ê–ù–ò–ô")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º Python
    python_version = sys.version_info
    print(f"üêç Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    if python_version < (3, 8):
        print("‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è Python 3.8 –∏–ª–∏ –≤—ã—à–µ")
        return False
    else:
        print("‚úÖ –í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–∞–∫–µ—Ç—ã
    required_packages = ["requests", "django", "celery", "redis"]
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\nüì¶ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–∞–∫–µ—Ç—ã:")
        print(f"pip install {' '.join(missing_packages)}")
        return False
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï STREETBURGER MINI APP")
    print("=" * 60)
    print(f"‚è∞ –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
    if not check_system_requirements():
        print("\n‚ùå –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
    if not check_django_server():
        print("\nüöÄ Django —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º...")
        server_process = start_django_server()
        if not server_process:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä")
            sys.exit(1)
    else:
        print("‚úÖ Django —Å–µ—Ä–≤–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
        server_process = None
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã
        run_specific_tests()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Å—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞
        success = run_client_tests()
        
        if success:
            print("\nüéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
            print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–ª–∏–µ–Ω—Ç–∞–º–∏")
        else:
            print("\n‚ö†Ô∏è  –ù–ï–ö–û–¢–û–†–´–ï –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´!")
            print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
        
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä, –µ—Å–ª–∏ –º—ã –µ–≥–æ –∑–∞–ø—É—Å–∫–∞–ª–∏
        if server_process:
            print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Django —Å–µ—Ä–≤–µ—Ä–∞...")
            server_process.terminate()
            server_process.wait()

if __name__ == "__main__":
    main() 