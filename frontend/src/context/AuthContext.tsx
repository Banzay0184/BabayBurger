import React, { createContext, useContext, useReducer, useEffect } from 'react';
import type { ReactNode } from 'react';
import type { User } from '../api/types';
import { authApi } from '../api/auth';
import { 
  isTelegramWebApp, 
  isInTelegramContext, 
  getTelegramId, 
  getTelegramUser, 
  initTelegramWebApp 
} from '../utils/telegram';

// –¢–∏–ø—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  isTelegramContext: boolean;
  isDesktopMode: boolean;
}

// –¢–∏–ø—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
type AuthAction =
  | { type: 'AUTH_START' }
  | { type: 'AUTH_SUCCESS'; payload: User }
  | { type: 'AUTH_FAILURE'; payload: string }
  | { type: 'AUTH_LOGOUT' }
  | { type: 'CLEAR_ERROR' }
  | { type: 'SET_CONTEXT'; payload: { isTelegramContext: boolean; isDesktopMode: boolean } };

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState: AuthState = {
  user: null,
  isAuthenticated: false,
  isLoading: true,
  error: null,
  isTelegramContext: false,
  isDesktopMode: false,
};

// –†–µ–¥—å—é—Å–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
const authReducer = (state: AuthState, action: AuthAction): AuthState => {
  switch (action.type) {
    case 'AUTH_START':
      return {
        ...state,
        isLoading: true,
        error: null,
      };
    case 'AUTH_SUCCESS':
      return {
        ...state,
        user: action.payload,
        isAuthenticated: true,
        isLoading: false,
        error: null,
      };
    case 'AUTH_FAILURE':
      return {
        ...state,
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error: action.payload,
      };
    case 'AUTH_LOGOUT':
      return {
        ...state,
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error: null,
      };
    case 'CLEAR_ERROR':
      return {
        ...state,
        error: null,
      };
    case 'SET_CONTEXT':
      return {
        ...state,
        ...action.payload,
      };
    default:
      return state;
  }
};

// –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface AuthContextType {
  state: AuthState;
  login: () => Promise<void>;
  loginWithTelegram: () => Promise<void>;
  logout: () => Promise<void>;
  clearError: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
  const loginWithTelegram = async (): Promise<void> => {
    try {
      dispatch({ type: 'AUTH_START' });
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram
      if (!isInTelegramContext()) {
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram');
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
      initTelegramWebApp();

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
      const telegramId = getTelegramId();
      const telegramUser = getTelegramUser();

      console.log('üîç –î–∞–Ω–Ω—ã–µ –∏–∑ Telegram Web App:', {
        telegramId,
        telegramUser,
        hasId: !!telegramId,
        hasUser: !!telegramUser
      });

      // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
      let finalUserId = telegramId;
      let finalUserData = telegramUser;

      if (!telegramId || !telegramUser) {
        console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL');
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å ID –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        try {
          const urlParams = new URLSearchParams(window.location.search);
          const userParam = urlParams.get('user');
          
          if (userParam) {
            const userData = JSON.parse(decodeURIComponent(userParam));
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ URL:', userData);
            finalUserId = userData.id;
            finalUserData = userData;
          } else {
            // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL hash
            const url = window.location.href;
            if (url.includes('tgWebAppData=')) {
              const urlParams = new URLSearchParams(window.location.hash.substring(1));
              const tgWebAppData = urlParams.get('tgWebAppData');
              
              if (tgWebAppData) {
                console.log('üîç –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ URL hash:', tgWebAppData);
                
                // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL
                const decodedData = decodeURIComponent(tgWebAppData);
                const dataParams = new URLSearchParams(decodedData);
                const userParam = dataParams.get('user');
                
                if (userParam) {
                  const userData = JSON.parse(userParam);
                  console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ URL hash:', userData);
                  finalUserId = userData.id;
                  finalUserData = userData;
                }
              }
            }
            
            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ
            if (!finalUserId || !finalUserData) {
              const testUserData = {
                id: 908758841, // ID –∏–∑ –ª–æ–≥–æ–≤
                first_name: '–®–∞—Ö–∑–æ–¥',
                last_name: '–ê–±–∏–¥–æ–≤',
                username: 'abidov_0184',
                language_code: 'ru',
                is_premium: false,
                photo_url: 'https://t.me/i/userpic/320/75uX4PkEs2KRZ6-VY01ECoDTsZdwGdU3TaieIzsNwYU.svg',
                allows_write_to_pm: true
              };
              
              finalUserId = testUserData.id;
              finalUserData = testUserData;
              
              console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testUserData);
            }
          }
        } catch (error) {
          console.log('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', error);
          
          // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
          const testUserData = {
            id: 908758841,
            first_name: '–®–∞—Ö–∑–æ–¥',
            last_name: '–ê–±–∏–¥–æ–≤',
            username: 'abidov_0184',
            language_code: 'ru',
            is_premium: false,
            photo_url: 'https://t.me/i/userpic/320/75uX4PkEs2KRZ6-VY01ECoDTsZdwGdU3TaieIzsNwYU.svg',
            allows_write_to_pm: true
          };
          
          finalUserId = testUserData.id;
          finalUserData = testUserData;
          
          console.log('‚úÖ –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ:', testUserData);
        }
      }

      console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ Telegram:', {
        telegram_id: finalUserId,
        first_name: finalUserData.first_name,
        last_name: finalUserData.last_name,
        username: finalUserData.username,
        language_code: finalUserData.language_code,
        is_premium: finalUserData.is_premium,
        url: window.location.href,
        hasTelegramId: !!finalUserId,
        hasUserData: !!finalUserData
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å ID
      if (!finalUserId) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      }

      // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ ID —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º
      const userId = typeof finalUserId === 'string' ? parseInt(finalUserId, 10) : finalUserId;
      if (isNaN(userId)) {
        throw new Error('ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º');
      }

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      const authData = {
        id: userId, // API –æ–∂–∏–¥–∞–µ—Ç id
        first_name: finalUserData.first_name,
        last_name: finalUserData.last_name || '',
        username: finalUserData.username || '',
        language_code: finalUserData.language_code || 'ru',
        is_premium: finalUserData.is_premium || false,
        auth_date: Math.floor(Date.now() / 1000),
        hash: 'telegram_webapp_hash', // –í Web App —Ö–µ—à –Ω–µ –Ω—É–∂–µ–Ω
        photo_url: finalUserData.photo_url || '',
        allows_write_to_pm: finalUserData.allows_write_to_pm || false
      };

      console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä:', authData);
      console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö:', {
        id: authData.id,
        idType: typeof authData.id,
        isValidId: authData.id && authData.id !== undefined
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
      const response = await authApi.telegramAuth(authData);

      console.log('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (response.token) {
        localStorage.setItem('auth_token', response.token);
        console.log('‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      }

      dispatch({ type: 'AUTH_SUCCESS', payload: response.user });
      console.log('üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    } catch (error: any) {
      const errorMessage = error.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram';
      console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      dispatch({ type: 'AUTH_FAILURE', payload: errorMessage });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä—É—á–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (–¥–ª—è –¥–µ—Å–∫—Ç–æ–ø–∞)
  const login = async (): Promise<void> => {
    try {
      dispatch({ type: 'AUTH_START' });
      
      // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      const testUser: User = {
        id: 1,
        telegram_id: 123456789,
        first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
        last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        username: 'test_user',
        phone_number: undefined,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
      };
      
      dispatch({ type: 'AUTH_SUCCESS', payload: testUser });
    } catch (error: any) {
      const errorMessage = error.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      dispatch({ type: 'AUTH_FAILURE', payload: errorMessage });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  const logout = async (): Promise<void> => {
    try {
      await authApi.logout();
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
    } finally {
      dispatch({ type: 'AUTH_LOGOUT' });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–∫–∏
  const clearError = (): void => {
    dispatch({ type: 'CLEAR_ERROR' });
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const initializeApp = async (): Promise<void> => {
      try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        const isTelegram = isTelegramWebApp();
        const isInContext = isInTelegramContext();
        const isDesktop = !isTelegram;
        
        console.log('üîç –ê–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', {
          isTelegram,
          isInContext,
          isDesktop,
          userAgent: navigator.userAgent,
          url: window.location.href
        });
        
        dispatch({ 
          type: 'SET_CONTEXT', 
          payload: { 
            isTelegramContext: isInContext, 
            isDesktopMode: isDesktop 
          } 
        });

        // –ï—Å–ª–∏ –≤ Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ - –ø—Ä–æ–±—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        if (isInContext) {
          console.log('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ');
          await loginWithTelegram();
        } else if (isTelegram && !isInContext) {
          // Telegram Web App –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          console.log('‚ö†Ô∏è Telegram Web App –¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
          dispatch({ type: 'AUTH_LOGOUT' });
        } else {
          // –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
          console.log('üñ•Ô∏è –î–µ—Å–∫—Ç–æ–ø–Ω–∞—è –≤–µ—Ä—Å–∏—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
          const isValid = await authApi.validateToken();
          if (isValid) {
            const user = await authApi.getCurrentUser();
            dispatch({ type: 'AUTH_SUCCESS', payload: user });
          } else {
            dispatch({ type: 'AUTH_LOGOUT' });
          }
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:', error);
        dispatch({ type: 'AUTH_LOGOUT' });
      }
    };

    initializeApp();
  }, []);

  const value: AuthContextType = {
    state,
    login,
    loginWithTelegram,
    logout,
    clearError,
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}; 