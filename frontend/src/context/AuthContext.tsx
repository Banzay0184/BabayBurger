import React, { createContext, useContext, useReducer, useEffect } from 'react';
import type { ReactNode } from 'react';
import type { User } from '../api/types';
import { authApi, telegramAuth } from '../api/auth';
import {
  getTelegramId,
  getTelegramUser,
  initTelegramWebApp,
  isInTelegramContext,
  getTelegramContextInfo
} from '../utils/telegram';
import type { TelegramWidgetUser } from '../types/telegram';

// –¢–∏–ø—ã –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface AuthState {
  user: User | null;
  isAuthenticated: boolean;
  isLoading: boolean;
  error: string | null;
  telegramContext: {
    isAvailable: boolean;
    isInContext: boolean;
    hasUserData: boolean;
    message: string;
  };
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  debugLogs: string[];
  showDebugInfo: boolean;
}

// –¢–∏–ø—ã –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π
type AuthAction =
  | { type: 'AUTH_START' }
  | { type: 'AUTH_SUCCESS'; payload: User }
  | { type: 'AUTH_FAILURE'; payload: string }
  | { type: 'AUTH_LOGOUT' }
  | { type: 'CLEAR_ERROR' }
  | { type: 'SET_TELEGRAM_CONTEXT'; payload: any }
  | { type: 'ADD_DEBUG_LOG'; payload: string }
  | { type: 'CLEAR_DEBUG_LOGS' }
  | { type: 'TOGGLE_DEBUG_INFO' };

// –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
const initialState: AuthState = {
  user: null,
  isAuthenticated: false,
  isLoading: true,
  error: null,
  telegramContext: {
    isAvailable: false,
    isInContext: false,
    hasUserData: false,
    message: '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegram...'
  },
  debugLogs: [],
  showDebugInfo: false,
};

// –†–µ–¥—å—é—Å–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º
const authReducer = (state: AuthState, action: AuthAction): AuthState => {
  switch (action.type) {
    case 'AUTH_START':
      return {
        ...state,
        isLoading: true,
        error: null,
      };
    case 'AUTH_SUCCESS':
      return {
        ...state,
        user: action.payload,
        isAuthenticated: true,
        isLoading: false,
        error: null,
      };
    case 'AUTH_FAILURE':
      return {
        ...state,
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error: action.payload,
      };
    case 'AUTH_LOGOUT':
      return {
        ...state,
        user: null,
        isAuthenticated: false,
        isLoading: false,
        error: null,
      };
    case 'CLEAR_ERROR':
      return {
        ...state,
        error: null,
      };
    case 'SET_TELEGRAM_CONTEXT':
      return {
        ...state,
        telegramContext: action.payload,
      };
    case 'ADD_DEBUG_LOG':
      return {
        ...state,
        debugLogs: [...state.debugLogs, action.payload],
      };
    case 'CLEAR_DEBUG_LOGS':
      return {
        ...state,
        debugLogs: [],
      };
    case 'TOGGLE_DEBUG_INFO':
      return {
        ...state,
        showDebugInfo: !state.showDebugInfo,
      };
    default:
      return state;
  }
};

// –ö–æ–Ω—Ç–µ–∫—Å—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
interface AuthContextType {
  state: AuthState;
  login: () => Promise<void>;
  forceLogin: () => Promise<void>; // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
  logout: () => Promise<void>;
  clearError: () => void;
  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  addDebugLog: (message: string) => void;
  clearDebugLogs: () => void;
  toggleDebugInfo: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ Telegram –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const checkTelegramContext = () => {
      const contextInfo = getTelegramContextInfo();
      dispatch({ type: 'SET_TELEGRAM_CONTEXT', payload: contextInfo });
      console.log('Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç:', contextInfo);
    };

    checkTelegramContext();
  }, []);

  // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
  const addDebugLog = (message: string) => {
    dispatch({ type: 'ADD_DEBUG_LOG', payload: message });
  };

  // –§—É–Ω–∫—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram
  const login = async (): Promise<void> => {
    try {
      dispatch({ type: 'AUTH_START' });
      addDebugLog('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç Telegram
      if (!isInTelegramContext()) {
        addDebugLog('‚ùå –ù–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Telegram');
        throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram');
      }

      addDebugLog('‚úÖ –í –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Telegram');

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
      initTelegramWebApp();
      addDebugLog('‚úÖ Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
      const telegramId = getTelegramId();
      const telegramUser = getTelegramUser();

      if (!telegramId || !telegramUser) {
        addDebugLog('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram');
      }

      addDebugLog(`‚úÖ –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${telegramUser.first_name} (ID: ${telegramId})`);

      console.log('–ü–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏:', {
        telegram_id: telegramId,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name,
        username: telegramUser.username
      });

      // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç
      const widgetUserData: TelegramWidgetUser = {
        id: telegramId,
        first_name: telegramUser.first_name,
        last_name: telegramUser.last_name || '',
        username: telegramUser.username || '',
        language_code: telegramUser.language_code || 'ru',
        is_premium: telegramUser.is_premium || false,
        auth_date: Math.floor(Date.now() / 1000),
        hash: 'telegram_webapp_hash', // –í Web App —Ö–µ—à –Ω–µ –Ω—É–∂–µ–Ω
        photo_url: '',
        allows_write_to_pm: false
      };

      addDebugLog('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', widgetUserData);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ –≤–∏–¥–∂–µ—Ç
      const response = await telegramAuth(widgetUserData);

      addDebugLog('‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞');

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
      if (response.token) {
        localStorage.setItem('auth_token', response.token);
        addDebugLog('‚úÖ –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω');
      }

      dispatch({ type: 'AUTH_SUCCESS', payload: response.user });
      addDebugLog('üéâ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!');
    } catch (error: any) {
      const errorMessage = error.message || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      addDebugLog(`‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: ${errorMessage}`);
      console.error('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      dispatch({ type: 'AUTH_FAILURE', payload: errorMessage });
    }
  };

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const forceLogin = async (): Promise<void> => {
    try {
      dispatch({ type: 'AUTH_START' });
      initTelegramWebApp();

      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ª—é–±—ã–º —Å–ø–æ—Å–æ–±–æ–º
      const telegramId = getTelegramId();
      const telegramUser = getTelegramUser();

      if (telegramId && telegramUser) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
        console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏:', { telegram_id: telegramId, first_name: telegramUser.first_name });
        const response = await authApi.telegramAuth({ telegram_id: telegramId, first_name: telegramUser.first_name, last_name: telegramUser.last_name, username: telegramUser.username });
        if (response.token) { localStorage.setItem('auth_token', response.token); }
        dispatch({ type: 'AUTH_SUCCESS', payload: response.user });
      } else {
        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        console.log('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –±–µ–∑ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
        const testUser: User = {
          id: 1,
          telegram_id: 123456789,
          first_name: '–¢–µ—Å—Ç–æ–≤—ã–π',
          last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
          username: 'test_user',
          phone_number: undefined,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        };
        dispatch({ type: 'AUTH_SUCCESS', payload: testUser });
      }
    } catch (error: any) {
      const errorMessage = error.message || '–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
      dispatch({ type: 'AUTH_FAILURE', payload: errorMessage });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
  const logout = async (): Promise<void> => {
    try {
      dispatch({ type: 'AUTH_LOGOUT' });
      await authApi.logout();
    } catch (error: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', error);
      dispatch({ type: 'AUTH_LOGOUT' });
    }
  };

  // –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –æ—à–∏–±–∫–∏
  const clearError = (): void => {
    dispatch({ type: 'CLEAR_ERROR' });
  };

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const checkAuth = async (): Promise<void> => {
      try {
        const isValid = await authApi.validateToken();
        if (isValid) {
          const user = await authApi.getCurrentUser();
          dispatch({ type: 'AUTH_SUCCESS', payload: user });
        } else {
          dispatch({ type: 'AUTH_LOGOUT' });
        }
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', error);
        dispatch({ type: 'AUTH_LOGOUT' });
      }
    };

    checkAuth();
  }, []);

  const value: AuthContextType = {
    state,
    login,
    forceLogin,
    logout,
    clearError,
    addDebugLog: (message: string) => dispatch({ type: 'ADD_DEBUG_LOG', payload: message }),
    clearDebugLogs: () => dispatch({ type: 'CLEAR_DEBUG_LOGS' }),
    toggleDebugInfo: () => dispatch({ type: 'TOGGLE_DEBUG_INFO' }),
  };

  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const useAuth = (): AuthContextType => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}; 