import React, { useState, useEffect } from 'react';
import { menuApi } from '../../api/menu';
import { API_CONFIG } from '../../config/api';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const testApiConnection = async () => {
  const baseUrl = API_CONFIG.BASE_URL;
  
  console.log('üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
  console.log('üåê Base URL:', baseUrl);
  
  const tests = [
    {
      name: 'Test endpoint',
      url: `${baseUrl}test/`,
      method: 'GET'
    },
    {
      name: 'Menu endpoint',
      url: `${baseUrl}menu/`,
      method: 'GET'
    }
  ];
  
  const results = [];
  
  for (const test of tests) {
    try {
      console.log(`üìã –¢–µ—Å—Ç–∏—Ä—É–µ–º: ${test.name}`);
      
      const response = await fetch(test.url, {
        method: test.method,
        headers: {
          'ngrok-skip-browser-warning': 'true',
          'Content-Type': 'application/json',
        },
      });
      
      if (response.ok) {
        const data = await response.text();
        console.log(`‚úÖ ${test.name}: –£–°–ü–ï–• (${response.status})`);
        console.log(`üìÑ –û—Ç–≤–µ—Ç: ${data.substring(0, 100)}...`);
        results.push({ test: test.name, success: true, status: response.status });
      } else {
        console.log(`‚ùå ${test.name}: –û–®–ò–ë–ö–ê (${response.status})`);
        results.push({ test: test.name, success: false, status: response.status });
      }
    } catch (error: any) {
      console.log(`‚ùå ${test.name}: –ò–°–ö–õ–Æ–ß–ï–ù–ò–ï - ${error.message}`);
      results.push({ test: test.name, success: false, error: error.message });
    }
  }
  
  console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', results);
  return results;
};

const MenuPage: React.FC = () => {
  const [menuData, setMenuData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const loadMenu = async () => {
      try {
        console.log('üçî –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–Ω—é...');
        
        // –°–Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        await testApiConnection();
        
        const result = await menuApi.getMenu();
        
        if (result.success && result.data) {
          console.log('‚úÖ –ú–µ–Ω—é –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', result.data);
          setMenuData(result.data);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é:', result.error);
          setError(result.error?.message || '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é');
        }
      } catch (err: any) {
        console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–µ–Ω—é:', err);
        setError(err.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
      } finally {
        setLoading(false);
      }
    };

    loadMenu();
  }, []);

  if (loading) {
    return <div>–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–Ω—é...</div>;
  }

  if (error) {
    return (
      <div>
        <h2>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–µ–Ω—é</h2>
        <p>{error}</p>
        <button onClick={() => window.location.reload()}>
          –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
        </button>
        <button 
          onClick={() => window.location.href = '?test=api'}
          style={{ marginLeft: '10px', padding: '5px 10px' }}
        >
          –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API
        </button>
      </div>
    );
  }

  return (
    <div>
      <h1>–ú–µ–Ω—é</h1>
      {menuData && (
        <div>
          <h2>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ ({menuData.categories?.length || 0})</h2>
          {menuData.categories?.map((category: any) => (
            <div key={category.id}>
              <h3>{category.name}</h3>
              <p>{category.description}</p>
              <p>–¢–æ–≤–∞—Ä–æ–≤: {category.items?.length || 0}</p>
            </div>
          ))}
        </div>
      )}
    </div>
  );
};

export default MenuPage; 