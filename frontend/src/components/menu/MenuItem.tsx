import React, { useState } from 'react';
import { useCart } from '../../context/CartContext';
import { useLanguage } from '../../context/LanguageContext';
import { useFavorites } from '../../context/FavoriteContext';
import { OptionsModal } from './OptionsModal';
import type { MenuItem as MenuItemType, SizeOption, AddOn } from '../../types/menu';

interface MenuItemProps {
  item: MenuItemType;
  onSelect?: (item: MenuItemType, size?: SizeOption, addOns?: AddOn[]) => void;
  isCompact?: boolean;
}

export const MenuItem: React.FC<MenuItemProps> = ({ 
  item, 
  onSelect, 
  isCompact = false 
}) => {
  const { addItem, decrementByKey, getItemCountForMenuItem, state: cartState } = useCart();
  const { t, formatCurrency } = useLanguage();
  const { toggleFavorite, isFavorite } = useFavorites();
  const [isModalOpen, setIsModalOpen] = useState(false);

  const availableSizes = item.size_options?.filter((size: SizeOption) => size.is_active) || [];
  const availableAddOns = item.add_on_options?.filter((addOn: AddOn) => addOn.is_active) || [];
  const currentCount = getItemCountForMenuItem(item.id);

  // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞
  const handleOpenModal = () => {
    setIsModalOpen(true);
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞
  const handleCloseModal = () => {
    setIsModalOpen(false);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø—Ü–∏–π –∏–∑ –º–æ–¥–∞–ª–∞
  const handleConfirmOptions = (size?: SizeOption, addOns?: AddOn[]) => {
    addItem(item, size, addOns);
    if (onSelect) onSelect(item, size, addOns);
    
    const optionsText = [];
    if (size) optionsText.push(`${t('size')}: ${size.name}`);
    if (addOns && addOns.length > 0) {
      optionsText.push(`${t('addition')}: ${addOns.map(a => a.name).join(', ')}`);
    }
    
    const message = optionsText.length > 0 
      ? `${item.name} ${t('with_options')} ${optionsText.join(', ')} ${t('added_to_cart')}`
      : `${item.name} ${t('added_to_cart')}`;
    
    showNotification(message);
    handleCloseModal();
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
  const [isToggling, setIsToggling] = useState(false);
  
  const handleToggleFavorite = async () => {
    if (isToggling) {
      console.log('ü§ç Already toggling favorite, skipping...');
      return;
    }
    
    try {
      setIsToggling(true);
      const wasFavorite = isFavorite(item.id);
      
      console.log('ü§ç MenuItem - Starting toggle:', {
        item: item.name,
        wasFavorite,
        action: wasFavorite ? 'remove' : 'add'
      });
      
      await toggleFavorite(item);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
      const message = wasFavorite 
        ? `${item.name} ${t('removed_from_favorites')}` 
        : `${item.name} ${t('added_to_favorites')}`;
      
      showNotification(message);
    } catch (error) {
      console.error('Error toggling favorite:', error);
      showNotification(t('error_toggle_favorite'));
    } finally {
      setIsToggling(false);
    }
  };

  // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const showNotification = (message: string) => {
    // –ü—Ä–æ—Å—Ç–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–Ω—Å–æ–ª–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ toast)
    console.log(message);
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–≥–æ–≤ –¥–ª—è –±–ª—é–¥–∞
  const getTags = () => {
    const tags = [];
    
    const name = item.name.toLowerCase();
    if (name.includes('–æ—Å—Ç—Ä—ã–π') || name.includes('spicy') || name.includes('—á–∏–ª–∏') || name.includes('o\'tkir')) {
      tags.push({ text: `üå∂Ô∏è ${t('spicy')}`, color: 'bg-red-600/20 text-red-400 border-red-500/30' });
    }
    
    if (name.includes('–≤–µ–≥–µ—Ç–∞—Ä–∏–∞–Ω') || name.includes('vegetarian') || name.includes('–æ–≤–æ—â') || name.includes('sabzavot')) {
      tags.push({ text: `ü•¨ ${t('vegetarian')}`, color: 'bg-green-600/20 text-green-400 border-green-500/30' });
    }
    
    if (name.includes('–±–µ–∑ –≥–ª—é—Ç–µ–Ω–∞') || name.includes('gluten-free') || name.includes('glyutensiz')) {
      tags.push({ text: `üåæ ${t('gluten_free')}`, color: 'bg-blue-600/20 text-blue-400 border-blue-500/30' });
    }
    
    if (item.is_hit) {
      tags.push({ text: `üî• ${t('hit')}`, color: 'bg-orange-600/20 text-orange-400 border-orange-500/30' });
    }
    
    if (item.is_new) {
      tags.push({ text: `‚ú® ${t('new')}`, color: 'bg-purple-600/20 text-purple-400 border-purple-500/30' });
    }
    
    return tags;
  };

  const tags = getTags();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  const getImageUrl = (imagePath: string | null): string => {
    if (!imagePath) return '';
    if (imagePath.startsWith('http')) return imagePath;
    return `${import.meta.env.VITE_API_BASE_URL || 'http://localhost:8000'}${imagePath}`;
  };

  return (
    <>
      <div className={`tg-card-modern p-4 ${isCompact ? 'max-w' : ''}`}>
        {/* –í–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –∏ –±—ã—Å—Ç—Ä—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏ */}
        <div className="relative mb-3">
          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–ª—é–¥–∞ */}
          <div className={`${isCompact ? 'w-full h-32' : 'w-full h-48'} bg-gradient-to-br from-gray-800 to-gray-700 rounded-lg flex items-center justify-center border border-gray-600/50 overflow-hidden`}>
            {item.image ? (
              <img 
                src={getImageUrl(item.image) || ''} 
                alt={item.name}
                className="w-full h-full object-cover"
                onError={(e) => {
                  const target = e.target as HTMLImageElement;
                  target.style.display = 'none';
                  const parent = target.parentElement;
                  if (parent) {
                    const fallback = document.createElement('span');
                    fallback.className = 'text-2xl animate-float';
                    fallback.textContent = 'üçî';
                    parent.appendChild(fallback);
                  }
                }}
              />
            ) : (
              <span className="text-2xl animate-float">üçî</span>
            )}
          </div>
          
          {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ–≤–µ—Ä—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}
          <div className="absolute top-2 right-2 flex flex-col space-y-2">
            {/* –ö–Ω–æ–ø–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ */}
            <button
              onClick={handleToggleFavorite}
              disabled={isToggling}
              className={`w-7 h-7 rounded-full flex items-center justify-center transition-all duration-300 hover:scale-110 ${
                isToggling 
                  ? 'bg-gray-600 text-gray-400 cursor-not-allowed' 
                  : isFavorite(item.id) 
                    ? 'bg-red-500 text-white shadow-lg' 
                    : 'bg-gray-800/80 text-gray-300 hover:bg-gray-700/80'
              }`}
            >
              <span className="text-xs">
                {isToggling ? '‚è≥' : isFavorite(item.id) ? '‚ù§Ô∏è' : 'ü§ç'}
              </span>
            </button>
          </div>

          {/* –¢–µ–≥–∏ */}
          {tags.length > 0 && (
            <div className="absolute bottom-2 left-2 flex flex-wrap gap-1">
              {tags.slice(0, isCompact ? 1 : 2).map((tag, index) => (
                <span
                  key={index}
                  className={`px-2 py-1 text-xs rounded-full border ${tag.color} backdrop-blur-sm`}
                >
                  {tag.text}
                </span>
              ))}
            </div>
          )}
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª—é–¥–µ */}
        <div className="space-y-2">
          {/* –ù–∞–∑–≤–∞–Ω–∏–µ –∏ —Ü–µ–Ω–∞ */}
          <div className="flex justify-between items-start">
            <h3 className={`font-semibold text-gray-100 ${isCompact ? 'text-sm' : 'text-lg'} leading-tight line-clamp-2 flex-1 mr-2`}>
              {item.name}
            </h3>
            <span className={`font-bold text-primary-400 ${isCompact ? 'text-sm' : 'text-lg'} flex-shrink-0`}>
              {formatCurrency(item.price)}
                </span>
          </div>
          
          {/* –û–ø–∏—Å–∞–Ω–∏–µ */}
          {!isCompact && (
            <p className="text-gray-400 text-sm leading-relaxed line-clamp-2">
            {item.description}
          </p>
          )}

          {/* –°—á–µ—Ç—á–∏–∫ –≤ –∫–æ—Ä–∑–∏–Ω–µ */}
          {currentCount > 0 && (
            <div className="flex items-center justify-center">
              <span className="inline-flex items-center justify-center min-w-[22px] h-5 px-1.5 rounded-full bg-accent-600 text-white text-[11px] font-bold">
                {t('in_cart')}: {currentCount}
              </span>
            </div>
          )}
        </div>
            
        {/* –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π –∏–ª–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º */}
        {availableSizes.length > 0 || availableAddOns.length > 0 ? (
          // –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø—Ü–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —à–µ—Å—Ç–µ—Ä–µ–Ω–∫–∏
          <button
            onClick={handleOpenModal}
            className={`w-full ${isCompact ? 'px-3 py-2 text-xs' : 'px-4 py-2.5 text-sm'} bg-gradient-to-r from-accent-500 to-accent-600 text-white rounded-lg font-semibold hover:from-accent-600 hover:to-accent-700 transition-all duration-300 hover:scale-105 shadow-dark-card hover:shadow-dark-card-hover mt-3`}
          >
            <span className="flex items-center justify-center">
              <span className="mr-2">‚öôÔ∏è</span>
              {t('select_options')}
            </span>
          </button>
        ) : (
          // –ï—Å–ª–∏ –æ–ø—Ü–∏–π –Ω–µ—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ - 1 +
          <div className="flex items-center justify-center space-x-2 mt-3">
            <button
              onClick={() => {
                // –£–º–µ–Ω—å—à–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                if (currentCount > 0) {
                  // –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä –≤ –∫–æ—Ä–∑–∏–Ω–µ –±–µ–∑ –æ–ø—Ü–∏–π
                  const cartItems = cartState.items.filter((i: any) => 
                    i.menuItem.id === item.id && 
                    !i.sizeOption && 
                    i.addOns.length === 0
                  );
                  
                  if (cartItems.length > 0) {
                    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –±–µ–∑ –æ–ø—Ü–∏–π –∏ —É–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                    const cartItem = cartItems[0];
                    decrementByKey(cartItem.key);
                    console.log('–£–º–µ–Ω—å—à–∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞:', item.name);
                  }
                }
              }}
              className={`w-8 h-8 rounded-full flex items-center justify-center transition-all duration-300 ${
                currentCount > 0 
                  ? 'bg-red-500 hover:bg-red-600 text-white' 
                  : 'bg-gray-600 text-gray-400 cursor-not-allowed'
              }`}
              disabled={currentCount === 0}
            >
              <span className="text-lg font-bold">-</span>
            </button>
            
            <span className="min-w-[2rem] text-center font-bold text-gray-100">
              {currentCount}
            </span>
            
            <button
              onClick={() => {
                // –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                addItem(item);
                if (onSelect) onSelect(item);
                showNotification(`${item.name} ${t('added_to_cart')}`);
              }}
              className="w-8 h-8 rounded-full bg-primary-500 hover:bg-primary-600 text-white flex items-center justify-center transition-all duration-300 hover:scale-105"
            >
              <span className="text-lg font-bold">+</span>
            </button>
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—Ü–∏–π */}
      <OptionsModal
        item={item}
        isOpen={isModalOpen}
        onClose={handleCloseModal}
        onConfirm={handleConfirmOptions}
        getImageUrl={getImageUrl}
      />
    </>
  );
}; 