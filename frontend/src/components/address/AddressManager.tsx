import React, { useState, useEffect } from 'react';
import { useLanguage } from '../../context/LanguageContext';
import { useAuth } from '../../context/AuthContext';
import { Button } from '../ui/Button';
import { YandexMapPicker } from '../map/YandexMapPicker';
import type { MapAddress } from '../../types/yandex-maps';

interface Address {
  id: number;
  street: string;
  house_number: string;
  apartment?: string;
  city: string;
  phone_number: string;
  comment?: string;
  is_primary: boolean;
  telegram_id?: string;
}

export const AddressManager: React.FC = () => {
  const { t } = useLanguage();
  const { state } = useAuth();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [addresses, setAddresses] = useState<Address[]>([]);
  const [showForm, setShowForm] = useState(false);
  const [showMapPicker, setShowMapPicker] = useState(false);
  const [editingAddress, setEditingAddress] = useState<Address | null>(null);
  const [formData, setFormData] = useState({
    street: '',
    house_number: '',
    apartment: '',
    city: '',
    phone_number: '',
    comment: '',
    is_primary: false,
    telegram_id: ''
  });

  // –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è telegram_id
  const getTelegramId = () => {
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ AuthContext (–≥–æ—Å—Ç–µ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    if (state.user && state.user.telegram_id) {
      console.log('üó∫Ô∏è üîç Got telegram_id from AuthContext:', state.user.telegram_id);
      return state.user.telegram_id.toString();
    }
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
    const savedTelegramId = localStorage.getItem('user_telegram_id');
    if (savedTelegramId) {
      console.log('üó∫Ô∏è üîç Got telegram_id from localStorage:', savedTelegramId);
      return savedTelegramId;
    }
    
    // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram WebApp
    if ((window as any).Telegram?.WebApp?.initDataUnsafe?.user?.id) {
      const telegramId = (window as any).Telegram.WebApp.initDataUnsafe.user.id;
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage –¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
      localStorage.setItem('user_telegram_id', telegramId.toString());
      console.log('üó∫Ô∏è üîç Got telegram_id from Telegram WebApp:', telegramId);
      return telegramId.toString();
    }
    
    // Fallback –Ω–∞ –≥–æ—Å—Ç–µ–≤–æ–π ID –∏–∑ –ª–æ–≥–æ–≤
    console.log('üó∫Ô∏è ‚ö†Ô∏è No telegram_id found, using fallback');
    return '123456789'; // Fallback ID –∏–∑ –ª–æ–≥–æ–≤
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadAddresses();
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–¥—Ä–µ—Å–æ–≤
  const loadAddresses = async () => {
    try {
      console.log('üó∫Ô∏è Loading addresses from backend...');
      
      // –ü–æ–ª—É—á–∞–µ–º telegram_id –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const telegramId = getTelegramId();
      console.log('üó∫Ô∏è üîç Loading addresses with telegram_id:', telegramId);
      
      const response = await fetch(`/api/addresses/?telegram_id=${telegramId}`);
      if (response.ok) {
        const addressesData = await response.json();
        setAddresses(addressesData);
        console.log('üó∫Ô∏è Addresses loaded:', addressesData.length);
      } else {
        console.error('Failed to load addresses:', response.status);
        setAddresses([]);
      }
    } catch (error) {
      console.error('Error loading addresses:', error);
      setAddresses([]);
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–æ—Ä–º—ã
  const handleInputChange = (field: keyof typeof formData, value: string | boolean) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
  const resetForm = () => {
    setFormData({
      street: '',
      house_number: '',
      apartment: '',
      city: '',
      phone_number: '',
      comment: '',
      is_primary: false,
      telegram_id: ''
    });
    setEditingAddress(null);
    setShowForm(false);
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
  const handleSave = async () => {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
      if (!formData.street) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —É–ª–∏—Ü—É');
        return;
      }
      
      if (!formData.house_number || formData.house_number.trim() === '') {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–æ–º–∞');
        return;
      }
      
      if (!formData.phone_number) {
        alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
        return;
      }

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
      const addressData = {
        street: formData.street,
        house_number: formData.house_number,
        apartment: formData.apartment || '',
        city: formData.city || '–ë—É—Ö–∞—Ä–∞',
        phone_number: formData.phone_number,
        comment: formData.comment || '',
        is_primary: formData.is_primary,
        telegram_id: formData.telegram_id
      };

      console.log('üó∫Ô∏è üîç Form data before save:', formData);
      console.log('üó∫Ô∏è üîç Address data to send:', addressData);
      console.log('üó∫Ô∏è üîç Telegram ID in addressData:', addressData.telegram_id);
      console.log('üó∫Ô∏è üîç User from AuthContext:', state.user);
      console.log('üó∫Ô∏è Saving address to backend:', addressData);

      if (editingAddress) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥—Ä–µ—Å–∞
        const response = await fetch('/api/addresses/' + editingAddress.id + '/', {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(addressData)
        });

        if (response.ok) {
          const updatedAddress = await response.json();
          const updatedAddresses = addresses.map(addr =>
            addr.id === editingAddress.id ? updatedAddress : addr
          );
          setAddresses(updatedAddresses);
          console.log('üó∫Ô∏è Address updated successfully');
        } else {
          throw new Error('Failed to update address');
        }
      } else {
        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        const response = await fetch('/api/addresses/', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(addressData)
        });

        if (response.ok) {
          const newAddress = await response.json();
          setAddresses(prev => [...prev, newAddress]);
          console.log('üó∫Ô∏è Address added successfully');
        } else {
          throw new Error('Failed to add address');
        }
      }

      resetForm();
    } catch (error) {
      console.error('Error saving address:', error);
      const errorMessage = error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      alert('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ' + errorMessage);
    }
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
  const handleEdit = (address: Address) => {
    console.log('üó∫Ô∏è Editing address:', address);
    setEditingAddress(address);
    setFormData({
      street: address.street,
      house_number: address.house_number,
      apartment: address.apartment || '',
      city: address.city,
      phone_number: address.phone_number,
      comment: address.comment || '',
      is_primary: address.is_primary,
      telegram_id: address.telegram_id || ''
    });
    setShowForm(true);
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
  const handleDelete = async (id: number) => {
    if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∞–¥—Ä–µ—Å?')) {
      try {
        console.log('üó∫Ô∏è Deleting address:', id);
        
        // –ü–æ–ª—É—á–∞–µ–º telegram_id –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        const telegramId = getTelegramId();
        
        // –£–¥–∞–ª—è–µ–º –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        const response = await fetch(`/api/addresses/${id}/`, {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({ telegram_id: telegramId })
        });
        
        if (response.ok) {
          // –£–¥–∞–ª—è–µ–º –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ –ë–î
          setAddresses(prev => prev.filter(addr => addr.id !== id));
          console.log('üó∫Ô∏è Address deleted from backend successfully');
          
          // –ï—Å–ª–∏ —É–¥–∞–ª—è–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–π –∞–¥—Ä–µ—Å, –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
          if (editingAddress && editingAddress.id === id) {
            setEditingAddress(null);
            setShowForm(false);
          }
        } else {
          const errorData = await response.json();
          console.error('Failed to delete address from backend:', errorData);
          alert(`–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ${errorData.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
        }
      } catch (error) {
        console.error('Error deleting address:', error);
        alert('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞: ' + (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'));
      }
    }
  };

  // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
  const handleSetPrimary = async (id: number) => {
    try {
      console.log('üó∫Ô∏è Setting primary address:', id);
      
      // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ –∞–¥—Ä–µ—Å–∞ –∫–∞–∫ –Ω–µ –æ—Å–Ω–æ–≤–Ω—ã–µ
      const updatedAddresses = addresses.map(addr => ({
        ...addr,
        is_primary: false
      }));
      
      // –ó–∞—Ç–µ–º —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π
      const finalAddresses = updatedAddresses.map(addr => ({
        ...addr,
        is_primary: addr.id === id
      }));
      
      setAddresses(finalAddresses);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const telegramId = getTelegramId();
      const response = await fetch(`/api/addresses/${id}/set-primary/`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ telegram_id: telegramId })
      });
      
      if (response.ok) {
        console.log('üó∫Ô∏è Primary address updated in backend');
      } else {
        console.error('Failed to update primary address in backend');
      }
    } catch (error) {
      console.error('Error setting primary address:', error);
      alert('–û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞');
    }
  };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ —Å –∫–∞—Ä—Ç—ã
  const handleMapAddressSelect = (mapAddress: MapAddress) => {
    console.log('üó∫Ô∏è Address selected from map:', mapAddress);
    
    // –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–∑ localStorage –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const getUserPhone = () => {
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ localStorage
      const savedPhone = localStorage.getItem('user_phone');
      if (savedPhone) return savedPhone;
      
      // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ Telegram WebApp
      if ((window as any).Telegram?.WebApp?.initDataUnsafe?.user?.phone_number) {
        return (window as any).Telegram.WebApp.initDataUnsafe.user.phone_number;
      }
      
      // Fallback –Ω–∞ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
      return '';
    };
    
    // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –∞–¥—Ä–µ—Å, —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ
    const existingData = editingAddress ? {
      apartment: editingAddress.apartment || '',
      phone_number: editingAddress.phone_number || getUserPhone(),
      comment: editingAddress.comment || '',
      is_primary: editingAddress.is_primary
    } : {
      apartment: '',
      phone_number: getUserPhone(),
      comment: '',
      is_primary: false
    };
    
    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–∞–Ω–Ω—ã–º–∏ —Å –∫–∞—Ä—Ç—ã
    setFormData({
      street: mapAddress.street || '',
      house_number: mapAddress.house || '1',
      apartment: existingData.apartment,
      city: mapAddress.city || '–ë—É—Ö–∞—Ä–∞',
      phone_number: existingData.phone_number,
      comment: existingData.comment,
      is_primary: existingData.is_primary,
      telegram_id: getTelegramId()
    });
    
    console.log('üó∫Ô∏è Form filled with map data:', {
      isEditing: !!editingAddress,
      phone: existingData.phone_number,
      existingData
    });
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–∞—Ä—Ç—É –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
    setShowMapPicker(false);
    setShowForm(true);
  };

  return (
    <div className="max-w-4xl mx-auto p-4">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="mb-6">
        <h2 className="text-2xl font-bold text-gray-100 mb-2">
          üìç {t('delivery_addresses')}
        </h2>
        <p className="text-gray-400">
          {t('manage_delivery_addresses')}
        </p>
      </div>

      {/* –°–ø–∏—Å–æ–∫ –∞–¥—Ä–µ—Å–æ–≤ */}
      {addresses.length > 0 ? (
        <div className="space-y-4 mb-6">
          {addresses.map((address) => (
            <div
              key={address.id}
              className={`p-4 rounded-lg border ${
                address.is_primary
                  ? 'border-primary-500 bg-primary-500/10'
                  : 'border-gray-600 bg-gray-700'
              }`}
            >
              <div className="flex items-start justify-between">
                <div className="flex-1">
                  <div className="flex items-center gap-2 mb-2">
                    {address.is_primary && (
                      <span className="px-2 py-1 bg-primary-600 text-white text-xs rounded">
                        {t('primary')}
                      </span>
                    )}
                    <h3 className="font-medium text-gray-100">
                      {address.street}, {address.house_number}
                      {address.apartment && `, –∫–≤. ${address.apartment}`}
                    </h3>
                  </div>
                  <p className="text-gray-400 text-sm mb-1">
                    {address.city}
                  </p>
                  <p className="text-gray-400 text-sm mb-2">
                    {address.phone_number}
                  </p>
                  {address.comment && (
                    <p className="text-gray-500 text-sm italic">
                      {address.comment}
                    </p>
                  )}
                </div>
                <div className="flex gap-2 ml-4">
                  {!address.is_primary && (
                    <Button
                      onClick={() => handleSetPrimary(address.id)}
                      className="bg-primary-600 hover:bg-primary-700 text-white px-3 py-1 text-sm"
                    >
                      {t('set_as_primary')}
                    </Button>
                  )}
                  <Button
                    onClick={() => handleEdit(address)}
                    className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 text-sm"
                  >
                    {t('edit')}
                  </Button>
                  <Button
                    onClick={() => handleDelete(address.id)}
                    className="bg-red-600 hover:bg-red-700 text-white px-3 py-1 text-sm"
                  >
                    {t('delete')}
                  </Button>
                </div>
              </div>
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-8 mb-6">
          <p className="text-gray-400 text-lg mb-2">
            {t('no_addresses')}
          </p>
          <p className="text-gray-500 text-sm mb-6">
            {t('add_first_address')}
          </p>
        </div>
      )}

      {/* –ö–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      {!showForm && (
        <div className="space-y-3">
          <Button
            onClick={() => {
              console.log('üó∫Ô∏è AddressManager: Map button clicked, setting showMapPicker to true');
              setShowMapPicker(true);
            }}
            className="w-full bg-primary-600 hover:bg-primary-700 text-white"
          >
            üó∫Ô∏è {t('select_on_map')}
          </Button>
        </div>
      )}

      {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {showForm && (
        <div className="tg-card-modern p-4">
          <div className="flex justify-between items-center mb-4">
            <h3 className="text-lg font-semibold text-gray-100">
              {editingAddress ? t('edit_address') : t('add_address')}
            </h3>
            
            {/* –ö–Ω–æ–ø–∫–∞ –∫–∞—Ä—Ç—ã –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
            {editingAddress && (
              <Button
                onClick={() => {
                  console.log('üó∫Ô∏è Edit address via map clicked');
                  setShowMapPicker(true);
                }}
                className="bg-primary-600 hover:bg-primary-700 text-white px-3 py-2 text-sm"
              >
                üó∫Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ
              </Button>
            )}
          </div>
          
          <div className="space-y-4">
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label className="block text-gray-300 text-sm mb-2">
                  {t('street')} *
                </label>
                <input
                  type="text"
                  value={formData.street}
                  onChange={(e) => handleInputChange('street', e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 focus:border-primary-500 focus:outline-none"
                  placeholder={t('street_placeholder')}
                />
              </div>
              
              <div>
                <label className="block text-gray-300 text-sm mb-2">
                  {t('house_number')} *
                </label>
                <input
                  type="text"
                  value={formData.house_number}
                  onChange={(e) => handleInputChange('house_number', e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 focus:border-primary-500 focus:outline-none"
                  placeholder="123"
                />
              </div>
            </div>
            
            <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
              <div>
                <label className="block text-gray-300 text-sm mb-2">
                  {t('apartment')}
                </label>
                <input
                  type="text"
                  value={formData.apartment}
                  onChange={(e) => handleInputChange('apartment', e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 focus:border-primary-500 focus:outline-none"
                  placeholder="45"
                />
              </div>
              
              <div>
                <label className="block text-gray-300 text-sm mb-2">
                  {t('city')} *
                </label>
                <input
                  type="text"
                  value={formData.city}
                  onChange={(e) => handleInputChange('city', e.target.value)}
                  className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 focus:border-primary-500 focus:outline-none"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥"
                />
              </div>
            </div>
            
            <div>
              <label className="block text-gray-300 text-sm mb-2">
                {t('phone_number')} *
              </label>
              <input
                type="tel"
                value={formData.phone_number}
                onChange={(e) => handleInputChange('phone_number', e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 focus:border-primary-500 focus:outline-none"
                placeholder="+998 90 123 45 67"
              />
            </div>
            
            <div>
              <label className="block text-gray-300 text-sm mb-2">
                {t('comment')}
              </label>
              <textarea
                value={formData.comment}
                onChange={(e) => handleInputChange('comment', e.target.value)}
                className="w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-lg text-gray-100 focus:border-primary-500 focus:outline-none"
                rows={3}
                placeholder={t('comment_placeholder')}
              />
            </div>
            
            <div className="flex items-center gap-2">
              <input
                type="checkbox"
                id="is_primary"
                checked={formData.is_primary}
                onChange={(e) => handleInputChange('is_primary', e.target.checked)}
                className="w-4 h-4 text-primary-600 bg-gray-700 border-gray-600 rounded focus:ring-primary-500 focus:ring-2"
              />
              <label htmlFor="is_primary" className="text-gray-300 text-sm">
                {t('set_as_primary')}
              </label>
            </div>
          </div>
          
          <div className="flex gap-3 mt-6">
            <Button
              onClick={handleSave}
              className="flex-1 bg-primary-600 hover:bg-primary-700 text-white"
            >
              {editingAddress ? t('update') : t('save')}
            </Button>
            
            <Button
              onClick={resetForm}
              className="flex-1 bg-gray-600 hover:bg-gray-700 text-white"
            >
              {t('cancel')}
            </Button>
          </div>
        </div>
      )}

      {/* –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç—ã */}
      {showMapPicker && (
        <YandexMapPicker
          onAddressSelect={handleMapAddressSelect}
          onClose={() => setShowMapPicker(false)}
        />
      )}
    </div>
  );
}; 
