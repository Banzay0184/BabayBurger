import React, { useEffect, useRef, useState, useCallback } from 'react';
import { useDeliveryZones } from '../../hooks/useDeliveryZones';
import { Button } from '../ui/Button';
import type { YandexMapInstance, YandexPlacemark, MapAddress } from '../../types/yandex-maps';

interface YandexMapPickerProps {
  onAddressSelect: (address: MapAddress) => void;
  onClose: () => void;
  initialCenter?: [number, number];
  initialZoom?: number;
}

export const YandexMapPicker: React.FC<YandexMapPickerProps> = ({
  onAddressSelect,
  onClose,
  initialCenter = [41.2995, 69.2401], // –¢–∞—à–∫–µ–Ω—Ç
  initialZoom = 11
}) => {

  const { zones, isLoading: zonesLoading, isAddressInDeliveryZone } = useDeliveryZones();
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstanceRef = useRef<YandexMapInstance | null>(null);
  const placemarkRef = useRef<YandexPlacemark | null>(null);
  const initTimeoutRef = useRef<number | null>(null);
  
  const [isMapLoading, setIsMapLoading] = useState(true);
  const [selectedAddress, setSelectedAddress] = useState<MapAddress | null>(null);
  const [addressInZone, setAddressInZone] = useState<boolean>(true);
  const [initStatus, setInitStatus] = useState<string>('–û–∂–∏–¥–∞–Ω–∏–µ...');

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
  const handleMapClick = useCallback(async (coords: [number, number]) => {
    if (!mapInstanceRef.current) return;

    console.log('üó∫Ô∏è Map clicked at:', coords);

    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–µ—Ç–∫—É
      if (placemarkRef.current) {
        try {
          mapInstanceRef.current.geoObjects.remove(placemarkRef.current);
        } catch (error) {
          console.error('Error removing placemark:', error);
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
      const { inZone } = isAddressInDeliveryZone(coords[1], coords[0]);
      setAddressInZone(inZone);

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É
      const placemark = new window.ymaps.Placemark(coords, {
        hintContent: inZone ? '–î–æ—Å—Ç—É–ø–Ω–æ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏' : '–í–Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏'
      }, {
        preset: inZone ? 'islands#greenIcon' : 'islands#redIcon'
      });

      mapInstanceRef.current.geoObjects.add(placemark);
      placemarkRef.current = placemark;

      // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
      try {
        const geocoder = await window.ymaps.geocode(coords);
        const firstGeoObject = geocoder.geoObjects.get(0);
        const address = firstGeoObject.getAddressLine();
        const thoroughfare = firstGeoObject.getThoroughfare();
        const premise = firstGeoObject.getPremise();
        const locality = firstGeoObject.getLocality();

        const addressData: MapAddress = {
          coordinates: [coords[1], coords[0]], // [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞]
          address: address,
          street: thoroughfare || '',
          house: premise || '',
          city: locality || '–¢–∞—à–∫–µ–Ω—Ç'
        };

        setSelectedAddress(addressData);
      } catch (error) {
        console.error('Geocoding error:', error);
        const addressData: MapAddress = {
          coordinates: [coords[1], coords[0]],
          address: `${coords[1].toFixed(6)}, ${coords[0].toFixed(6)}`,
          street: '',
          house: '',
          city: '–¢–∞—à–∫–µ–Ω—Ç'
        };
        setSelectedAddress(addressData);
      }
    } catch (error) {
      console.error('Error in handleMapClick:', error);
    }
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –ø–æ–ª–∏–≥–æ–Ω–∞–º–∏
  const addDeliveryZonesToMap = useCallback((map: YandexMapInstance) => {
    if (!zones || zones.length === 0) return;
    
    try {
      console.log('üó∫Ô∏è Adding delivery zones:', zones.length);
      
      zones.forEach((zone, index) => {
        try {
          // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
          // –ï—Å–ª–∏ —É –∑–æ–Ω—ã –µ—Å—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ø–æ–ª–∏–≥–æ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
          if (zone.coordinates && zone.coordinates.length > 0) {
            // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–∏–≥–æ–Ω –∏–∑ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
            const polygon = new window.ymaps.Polygon([zone.coordinates], {
              fillColor: '#00ff00',
              fillOpacity: 0.2,
              strokeColor: '#00ff00',
              strokeOpacity: 0.8,
              strokeWidth: 2
            }, {
              hintContent: `${zone.name || `–ó–æ–Ω–∞ ${index + 1}`} - –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏`
            });

            map.geoObjects.add(polygon);
            console.log(`‚úÖ Polygon zone ${index + 1} added`);
          } else {
            // –ï—Å–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –ø–æ–ª–∏–≥–æ–Ω–∞ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∫—Ä—É–≥ –ø–æ —Ü–µ–Ω—Ç—Ä—É –∏ —Ä–∞–¥–∏—É—Å—É
            const circle = new window.ymaps.Circle([
              [zone.center_longitude, zone.center_latitude], // [–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞]
              zone.radius_km * 1000 // –†–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
            ], {
              fillColor: '#00ff00',
              fillOpacity: 0.2,
              strokeColor: '#00ff00',
              strokeOpacity: 0.8,
              strokeWidth: 2
            }, {
              hintContent: `${zone.name || `–ó–æ–Ω–∞ ${index + 1}`} - –î–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏`
            });

            map.geoObjects.add(circle);
            console.log(`‚úÖ Circle zone ${index + 1} added (center: [${zone.center_longitude}, ${zone.center_latitude}], radius: ${zone.radius_km}km)`);
          }
        } catch (error) {
          console.error(`‚ùå Zone ${index + 1} error:`, error);
        }
      });
    } catch (error) {
      console.error('‚ùå Error adding zones:', error);
    }
  }, []); // –£–±–∏—Ä–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    console.log('üó∫Ô∏è YandexMapPicker: Component mounted');
    
    let isMounted = true;
    let retryCount = 0;
    const maxRetries = 10;
    
    const initMap = () => {
      if (!isMounted) {
        console.log('üó∫Ô∏è Component unmounted, stopping');
        return;
      }
      
      retryCount++;
      setInitStatus(`–ü–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries}`);
      
      if (retryCount > maxRetries) {
        console.error('üó∫Ô∏è Max retries reached');
        setInitStatus('–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫');
        setIsMapLoading(false);
        return;
      }
      
      console.log(`üó∫Ô∏è Attempt ${retryCount}/${maxRetries} - Starting map initialization...`);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
      if (typeof window.ymaps === 'undefined') {
        console.log('üó∫Ô∏è API not ready, retrying...');
        setInitStatus('API –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä...');
        initTimeoutRef.current = setTimeout(initMap, 1000);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ref
      if (!mapRef.current) {
        console.log('üó∫Ô∏è Ref not ready, retrying...');
        setInitStatus('Ref –Ω–µ –≥–æ—Ç–æ–≤, –ø–æ–≤—Ç–æ—Ä...');
        initTimeoutRef.current = setTimeout(initMap, 500);
        return;
      }

      console.log('üó∫Ô∏è API and ref ready, creating map...');
      setInitStatus('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã...');
      
      // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
      try {
        const map = new window.ymaps.Map(mapRef.current, {
          center: [69.2401, 41.2995], // –¢–∞—à–∫–µ–Ω—Ç [–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞]
          zoom: 11,
          controls: ['zoomControl', 'geolocationControl']
        });

        mapInstanceRef.current = map;
        console.log('üó∫Ô∏è ‚úÖ Map created successfully!');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        map.events.add('click', (e: any) => {
          const coords = e.get('coords');
          handleMapClick(coords);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        addDeliveryZonesToMap(map);

        // –ù–ï –∑–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é - —Ç–æ–ª—å–∫–æ –ø–æ –∫–Ω–æ–ø–∫–µ
        console.log('üó∫Ô∏è Skipping automatic geolocation - use button instead');
        setInitStatus('–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏');
        
        // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –∫ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–¢–∞—à–∫–µ–Ω—Ç)
        const defaultCoords: [number, number] = [69.2401, 41.2995];
        map.setCenter(defaultCoords, 12);

        // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        setIsMapLoading(false);
        setInitStatus('–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞!');
        console.log('üó∫Ô∏è üéâ Map initialization completed!');
        
      } catch (error) {
        console.error('üó∫Ô∏è Error creating map:', error);
        setInitStatus('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã');
        setIsMapLoading(false);
      }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    initTimeoutRef.current = setTimeout(initMap, 1000);

    return () => {
      console.log('üó∫Ô∏è Component unmounting');
      isMounted = false;
      
      if (initTimeoutRef.current) {
        clearTimeout(initTimeoutRef.current);
      }
      
      if (mapInstanceRef.current) {
        try {
          mapInstanceRef.current.destroy();
          mapInstanceRef.current = null;
        } catch (error) {
          console.error('üó∫Ô∏è Error destroying map:', error);
        }
      }
    };
  }, []); // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–µ—Ä–µ–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

  // –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const handleGetUserLocation = useCallback(() => {
    if (!navigator.geolocation) {
      setInitStatus('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      return;
    }

    console.log('üó∫Ô∏è Starting manual geolocation...');
    setInitStatus('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const coords: [number, number] = [
          position.coords.longitude, // –î–æ–ª–≥–æ—Ç–∞
          position.coords.latitude   // –®–∏—Ä–æ—Ç–∞
        ];
        
        console.log('üó∫Ô∏è ‚úÖ User location detected:', coords);
        console.log('üó∫Ô∏è Accuracy:', position.coords.accuracy, 'meters');
        
        if (mapInstanceRef.current) {
          // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫–∞—Ä—Ç—É –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
          mapInstanceRef.current.setCenter(coords, 16);
          
          // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–ª–∏–∫–∞–µ–º –ø–æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é
          setTimeout(() => {
            handleMapClick(coords);
          }, 500);
          
          setInitStatus('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ!');
        }
      },
      (error) => {
        console.log('üó∫Ô∏è ‚ùå Geolocation error:', error.message);
        console.log('üó∫Ô∏è Error code:', error.code);
        
        let errorMessage = '–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
        
        // –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
        switch (error.code) {
          case 1:
            errorMessage = '–î–æ—Å—Ç—É–ø –∫ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–µ—â–µ–Ω. –†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞.';
            break;
          case 2:
            errorMessage = '–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ GPS –∏–ª–∏ —Å–µ—Ç—å.';
            break;
          case 3:
            errorMessage = '–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
            break;
          default:
            errorMessage = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.';
        }
        
        console.log('üó∫Ô∏è Error description:', errorMessage);
        setInitStatus(errorMessage);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        setTimeout(() => {
          alert(`–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏: ${errorMessage}`);
        }, 1000);
      },
      {
        enableHighAccuracy: false,  // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º —Å –Ω–∏–∑–∫–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å—é
        timeout: 20000,            // 20 —Å–µ–∫—É–Ω–¥
        maximumAge: 600000         // 10 –º–∏–Ω—É—Ç
      }
    );
  }, []);

  // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞
  const handleConfirmAddress = useCallback(() => {
    if (selectedAddress && addressInZone) {
      onAddressSelect(selectedAddress);
    }
  }, [selectedAddress, addressInZone, onAddressSelect]);

  if (zonesLoading) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-gray-800 rounded-lg p-6 max-w-sm w-full mx-4">
          <div className="text-center">
            <div className="w-16 h-16 border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-gray-300">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-lg w-full max-w-4xl h-[80vh] flex flex-col">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-4 border-b border-gray-700">
          <div>
            <h3 className="text-lg font-semibold text-gray-100">
              üìç –í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
            </h3>
            <p className="text-xs text-gray-400 mt-1">
              –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: [{initialCenter[0]}, {initialCenter[1]}] | Zoom: {initialZoom}
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-200 text-xl"
          >
            ‚úï
          </button>
        </div>

        {/* –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ */}
        <div className="p-4 bg-gray-750 border-b border-gray-700">
          <div className="flex flex-wrap items-center justify-between gap-4">
            <div className="flex-1 min-w-0">
              <p className="text-sm text-gray-300 mb-2">
                –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
              </p>
              {zones.length > 0 && (
                <div className="flex items-center gap-4 text-xs text-gray-400">
                  <div className="flex items-center gap-1">
                    <div className="w-3 h-3 bg-green-500 bg-opacity-50 border border-green-500 rounded-full"></div>
                    <span>–ó–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏</span>
                  </div>
                </div>
              )}
            </div>
            <div className="flex gap-2">
              <Button
                onClick={handleGetUserLocation}
                className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm"
              >
                üìç –ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
              </Button>
              <Button
                onClick={() => {
                  if (mapInstanceRef.current) {
                    const defaultCoords: [number, number] = [69.2401, 41.2995];
                    mapInstanceRef.current.setCenter(defaultCoords, 12);
                    setInitStatus('–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –¢–∞—à–∫–µ–Ω—Ç');
                  }
                }}
                className="bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 text-sm"
              >
                üèôÔ∏è –¢–∞—à–∫–µ–Ω—Ç
              </Button>
            </div>
          </div>
        </div>

        {/* –ö–∞—Ä—Ç–∞ */}
        <div className="flex-1 relative">
          {isMapLoading && (
            <div className="absolute inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-10">
              <div className="text-center">
                <div className="w-16 h-16 border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin mx-auto mb-4"></div>
                <p className="text-gray-300 text-lg">–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...</p>
                <div className="mt-4 p-3 bg-gray-800 rounded-lg text-left text-xs">
                  <p className="text-green-400">API: {typeof window.ymaps !== 'undefined' ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è≥ –ó–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...'}</p>
                  <p className="text-blue-400">Ref: {mapRef.current ? '‚úÖ –ì–æ—Ç–æ–≤' : '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ...'}</p>
                  <p className="text-yellow-400">–°—Ç–∞—Ç—É—Å: {initStatus}</p>
                </div>
              </div>
            </div>
          )}
          <div ref={mapRef} className="w-full h-full" />
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–¥—Ä–µ—Å–µ */}
        {selectedAddress && (
          <div className="p-4 bg-gray-750 border-t border-gray-700">
            <div className="flex items-start justify-between">
              <div className="flex-1 min-w-0">
                <h4 className="font-medium text-gray-100 mb-1">
                  –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:
                </h4>
                <p className="text-sm text-gray-300 break-words">
                  {selectedAddress.address}
                </p>
                <p className="text-xs text-gray-400 mt-1">
                  {selectedAddress.coordinates[0].toFixed(6)}, {selectedAddress.coordinates[1].toFixed(6)}
                </p>
                {!addressInZone && (
                  <p className="text-sm text-red-400 mt-2">
                    ‚ö†Ô∏è –ê–¥—Ä–µ—Å –≤–Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
                  </p>
                )}
              </div>
              <div className="flex gap-2 ml-4">
                <Button
                  onClick={onClose}
                  className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2"
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button
                  onClick={handleConfirmAddress}
                  disabled={!addressInZone}
                  className={`px-4 py-2 text-white ${
                    addressInZone 
                      ? 'bg-primary-600 hover:bg-primary-700' 
                      : 'bg-gray-500 cursor-not-allowed'
                  }`}
                >
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å
                </Button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
