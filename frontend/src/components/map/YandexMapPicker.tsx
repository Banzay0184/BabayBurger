import React, { useEffect, useRef, useState, useCallback } from 'react';
import { useDeliveryZones } from '../../hooks/useDeliveryZones';
import { Button } from '../ui/Button';
import type { YandexMapInstance, MapAddress } from '../../types/yandex-maps';

interface YandexMapPickerProps {
  onAddressSelect: (address: MapAddress) => void;
  onClose: () => void;
}

export const YandexMapPicker: React.FC<YandexMapPickerProps> = ({
  onAddressSelect,
  onClose
}) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è
  const [isMapLoading, setIsMapLoading] = useState(true);
  const [selectedAddress, setSelectedAddress] = useState<MapAddress | null>(null);
  const [addressInZone, setAddressInZone] = useState<boolean>(false);
  const [status, setStatus] = useState<string>('–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ä—Ç—ã...');

  // Refs
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstanceRef = useRef<YandexMapInstance | null>(null);
  const placemarkRef = useRef<any>(null);

  // –•—É–∫–∏
  const { zones, isLoading: zonesLoading } = useDeliveryZones();

  // –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¢–∞—à–∫–µ–Ω—Ç–∞ (–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ)
  const TASHKENT_COORDS: [number, number] = [69.2797, 41.2995];

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ä—Ç–µ
  const handleMapClick = useCallback(async (coords: [number, number]) => {
    if (!mapInstanceRef.current) return;

    console.log('üó∫Ô∏è Map clicked at:', coords);
    setStatus('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞...');

    try {
      // –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–µ—Ç–∫—É
      if (placemarkRef.current) {
        mapInstanceRef.current.geoObjects.remove(placemarkRef.current);
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–µ—Ç–∫—É
      const placemark = new window.ymaps.Placemark(coords, {
        hintContent: '–í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å'
      }, {
        preset: 'islands#redDotIcon'
      });

      mapInstanceRef.current.geoObjects.add(placemark);
      placemarkRef.current = placemark;

      // –ì–µ–æ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
      const geocoder = await window.ymaps.geocode(coords);
      const firstGeoObject = geocoder.geoObjects.get(0);
      const address = firstGeoObject.getAddressLine();

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–æ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏
      const isInZone = zones.some(zone => {
        const distance = Math.sqrt(
          Math.pow(coords[0] - zone.center_longitude, 2) + 
          Math.pow(coords[1] - zone.center_latitude, 2)
        );
        return distance <= zone.radius_km / 111; // –ü—Ä–∏–º–µ—Ä–Ω–æ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –≥—Ä–∞–¥—É—Å–∞—Ö
      });

      setAddressInZone(isInZone);

      // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∞–¥—Ä–µ—Å–∞
      const addressData: MapAddress = {
        coordinates: [coords[1], coords[0]], // [—à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞] –¥–ª—è –±—ç–∫—ç–Ω–¥–∞
        address: address,
        street: firstGeoObject.getThoroughfare() || '',
        house: firstGeoObject.getPremise() || '',
        city: firstGeoObject.getLocality() || '–¢–∞—à–∫–µ–Ω—Ç'
      };

      setSelectedAddress(addressData);
      setStatus('–ê–¥—Ä–µ—Å –≤—ã–±—Ä–∞–Ω!');

    } catch (error) {
      console.error('Error in handleMapClick:', error);
      setStatus('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞–¥—Ä–µ—Å–∞');
    }
  }, [zones]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ –∫–∞—Ä—Ç—É
  const addDeliveryZones = useCallback((map: YandexMapInstance) => {
    if (!zones || zones.length === 0) return;

    console.log('üó∫Ô∏è Adding delivery zones:', zones.length);

    zones.forEach((zone, index) => {
      try {
        // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        const circle = new window.ymaps.Circle([
          [zone.center_longitude, zone.center_latitude], // [–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞]
          zone.radius_km * 1000 // –†–∞–¥–∏—É—Å –≤ –º–µ—Ç—Ä–∞—Ö
        ], {
          fillColor: '#00ff00',
          fillOpacity: 0.2,
          strokeColor: '#00ff00',
          strokeOpacity: 0.8,
          strokeWidth: 2
        }, {
          hintContent: `${zone.name || `–ó–æ–Ω–∞ ${index + 1}`} - –î–æ—Å—Ç–∞–≤–∫–∞: ${zone.delivery_fee} —Å—É–º`
        });

        map.geoObjects.add(circle);
        console.log(`‚úÖ Zone ${index + 1} added`);
      } catch (error) {
        console.error(`‚ùå Zone ${index + 1} error:`, error);
      }
    });
  }, [zones]);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const getUserLocation = useCallback(() => {
    if (!navigator.geolocation) {
      setStatus('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è');
      return;
    }

    setStatus('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è...');

    navigator.geolocation.getCurrentPosition(
      (position) => {
        const coords: [number, number] = [
          position.coords.longitude, // –î–æ–ª–≥–æ—Ç–∞
          position.coords.latitude   // –®–∏—Ä–æ—Ç–∞
        ];

        console.log('üó∫Ô∏è User location:', coords);
        setStatus('–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ!');

        if (mapInstanceRef.current) {
          mapInstanceRef.current.setCenter(coords, 16);
          handleMapClick(coords);
        }
      },
      (error) => {
        console.log('üó∫Ô∏è Geolocation error:', error.message);
        setStatus('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
        
        // Fallback –Ω–∞ –¢–∞—à–∫–µ–Ω—Ç
        if (mapInstanceRef.current) {
          mapInstanceRef.current.setCenter(TASHKENT_COORDS, 12);
          setStatus('–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ –¢–∞—à–∫–µ–Ω—Ç');
        }
      },
      {
        enableHighAccuracy: false,
        timeout: 15000,
        maximumAge: 300000
      }
    );
  }, [handleMapClick]);

  // –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –≤ –¢–∞—à–∫–µ–Ω—Ç
  const goToTashkent = useCallback(() => {
    if (mapInstanceRef.current) {
      mapInstanceRef.current.setCenter(TASHKENT_COORDS, 12);
      setStatus('–ü–µ—Ä–µ–º–µ—â–µ–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä –¢–∞—à–∫–µ–Ω—Ç–∞');
    }
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Ä—Ç—ã
  useEffect(() => {
    console.log('üó∫Ô∏è YandexMapPicker: Component mounted');

    let isMounted = true;
    let retryCount = 0;
    const maxRetries = 5;

    const initMap = () => {
      if (!isMounted) return;

      retryCount++;
      setStatus(`–ü–æ–ø—ã—Ç–∫–∞ ${retryCount}/${maxRetries}...`);

      if (retryCount > maxRetries) {
        setStatus('–û—à–∏–±–∫–∞: –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫');
        setIsMapLoading(false);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º API
      if (typeof window.ymaps === 'undefined') {
        console.log('üó∫Ô∏è API not ready, retrying...');
        setTimeout(initMap, 1000);
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º ref
      if (!mapRef.current) {
        console.log('üó∫Ô∏è Ref not ready, retrying...');
        setTimeout(initMap, 500);
        return;
      }

      console.log('üó∫Ô∏è Creating map...');
      setStatus('–°–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç—ã...');

      try {
        // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        const map = new window.ymaps.Map(mapRef.current, {
          center: TASHKENT_COORDS, // [–¥–æ–ª–≥–æ—Ç–∞, —à–∏—Ä–æ—Ç–∞]
          zoom: 12,
          controls: ['zoomControl']
        });

        mapInstanceRef.current = map;
        console.log('üó∫Ô∏è ‚úÖ Map created successfully!');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞
        map.events.add('click', (e: any) => {
          const coords = e.get('coords');
          handleMapClick(coords);
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
        addDeliveryZones(map);

        // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        setIsMapLoading(false);
        setStatus('–ö–∞—Ä—Ç–∞ –≥–æ—Ç–æ–≤–∞!');
        console.log('üó∫Ô∏è üéâ Map initialization completed!');

      } catch (error) {
        console.error('üó∫Ô∏è Error creating map:', error);
        setStatus('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞—Ä—Ç—ã');
        setIsMapLoading(false);
      }
    };

    // –ù–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    setTimeout(initMap, 1000);

    return () => {
      console.log('üó∫Ô∏è Component unmounting');
      isMounted = false;

      if (mapInstanceRef.current) {
        try {
          mapInstanceRef.current.destroy();
          mapInstanceRef.current = null;
        } catch (error) {
          console.error('üó∫Ô∏è Error destroying map:', error);
        }
      }
    };
  }, [addDeliveryZones, handleMapClick]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–æ–Ω
  if (zonesLoading) {
    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-gray-800 rounded-lg p-6 max-w-sm w-full mx-4">
          <div className="text-center">
            <div className="w-16 h-16 border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-gray-300">–ó–∞–≥—Ä—É–∑–∫–∞ –∑–æ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏...</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-lg w-full max-w-4xl h-[80vh] flex flex-col">
        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <div className="flex items-center justify-between p-4 border-b border-gray-700">
          <div>
            <h3 className="text-lg font-semibold text-gray-100">
              üìç –í—ã–±–æ—Ä –∞–¥—Ä–µ—Å–∞ –Ω–∞ –∫–∞—Ä—Ç–µ
            </h3>
            <p className="text-xs text-gray-400 mt-1">
              –°—Ç–∞—Ç—É—Å: {status}
            </p>
          </div>
          <button
            onClick={onClose}
            className="text-gray-400 hover:text-gray-200 text-xl"
          >
            ‚úï
          </button>
        </div>

        {/* –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è */}
        <div className="p-4 bg-gray-750 border-b border-gray-700">
          <div className="flex flex-wrap items-center justify-between gap-4">
            <div className="flex-1 min-w-0">
              <p className="text-sm text-gray-300 mb-2">
                –ö–ª–∏–∫–Ω–∏—Ç–µ –ø–æ –∫–∞—Ä—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–¥—Ä–µ—Å–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
              </p>
              {zones.length > 0 && (
                <div className="flex items-center gap-4 text-xs text-gray-400">
                  <div className="flex items-center gap-1">
                    <div className="w-3 h-3 bg-green-500 bg-opacity-50 border border-green-500 rounded-full"></div>
                    <span>–ó–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ ({zones.length})</span>
                  </div>
                </div>
              )}
            </div>
            <div className="flex gap-2">
              <Button
                onClick={getUserLocation}
                className="bg-blue-600 hover:bg-blue-700 text-white px-3 py-2 text-sm"
              >
                üìç –ú–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
              </Button>
              <Button
                onClick={goToTashkent}
                className="bg-gray-600 hover:bg-gray-700 text-white px-3 py-2 text-sm"
              >
                üèôÔ∏è –¢–∞—à–∫–µ–Ω—Ç
              </Button>
            </div>
          </div>
        </div>

        {/* –ö–∞—Ä—Ç–∞ */}
        <div className="flex-1 relative">
          {isMapLoading && (
            <div className="absolute inset-0 bg-gray-900 bg-opacity-75 flex items-center justify-center z-10">
              <div className="text-center">
                <div className="w-16 h-16 border-4 border-primary-200 border-t-primary-600 rounded-full animate-spin mx-auto mb-4"></div>
                <p className="text-gray-300 text-lg">{status}</p>
              </div>
            </div>
          )}
          <div ref={mapRef} className="w-full h-full" />
        </div>

        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–¥—Ä–µ—Å–µ */}
        {selectedAddress && (
          <div className="p-4 bg-gray-750 border-t border-gray-700">
            <div className="flex items-start justify-between">
              <div className="flex-1 min-w-0">
                <h4 className="font-medium text-gray-100 mb-1">
                  –í—ã–±—Ä–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å:
                </h4>
                <p className="text-sm text-gray-300 break-words">
                  {selectedAddress.address}
                </p>
                <p className="text-xs text-gray-400 mt-1">
                  –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {selectedAddress.coordinates[0].toFixed(6)}, {selectedAddress.coordinates[1].toFixed(6)}
                </p>
                {!addressInZone && (
                  <p className="text-sm text-red-400 mt-2">
                    ‚ö†Ô∏è –ê–¥—Ä–µ—Å –≤–Ω–µ –∑–æ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏
                  </p>
                )}
              </div>
              <div className="flex gap-2 ml-4">
                <Button
                  onClick={onClose}
                  className="bg-gray-600 hover:bg-gray-700 text-white px-4 py-2"
                >
                  –û—Ç–º–µ–Ω–∞
                </Button>
                <Button
                  onClick={() => onAddressSelect(selectedAddress)}
                  disabled={!addressInZone}
                  className={`px-4 py-2 text-white ${
                    addressInZone 
                      ? 'bg-primary-600 hover:bg-primary-700' 
                      : 'bg-gray-500 cursor-not-allowed'
                  }`}
                >
                  –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∞–¥—Ä–µ—Å
                </Button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};
