// –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Web App

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram Web App
export const isTelegramWebApp = (): boolean => {
  if (typeof window === 'undefined') return false;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ Telegram –æ–±—ä–µ–∫—Ç–∞
  if (!('Telegram' in window) || !('WebApp' in (window as any).Telegram)) {
    return false;
  }
  
  const webApp = (window as any).Telegram.WebApp;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ WebApp –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
  if (!webApp || typeof webApp.ready !== 'function') {
    return false;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ
  // –í –±—Ä–∞—É–∑–µ—Ä–µ initData –±—É–¥–µ—Ç –ø—É—Å—Ç—ã–º –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
  const hasInitData = webApp.initData && webApp.initData.length > 0;
  const hasUserData = webApp.initDataUnsafe?.user;
  
  return hasInitData || hasUserData;
};

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Telegram
export const isInTelegramContext = (): boolean => {
  if (!isTelegramWebApp()) return false;
  
  const webApp = (window as any).Telegram.WebApp;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const user = webApp.initDataUnsafe?.user;
  
  // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –≤ –±—Ä–∞—É–∑–µ—Ä–µ initData –æ–±—ã—á–Ω–æ –ø—É—Å—Ç–æ–π
  const hasInitData = webApp.initData && webApp.initData.length > 0;
  
  console.log('Telegram –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞:', {
    user: !!user,
    hasInitData: hasInitData,
    initDataLength: webApp.initData?.length || 0,
    platform: webApp.platform,
    isExpanded: webApp.isExpanded
  });
  
  return !!(user || hasInitData);
};

// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
export const getTelegramId = (): number | null => {
  if (!isTelegramWebApp()) return null;
  
  const webApp = (window as any).Telegram.WebApp;
  const user = webApp.initDataUnsafe?.user;
  
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ Telegram ID:', {
    hasWebApp: !!webApp,
    hasInitDataUnsafe: !!webApp.initDataUnsafe,
    hasUser: !!user,
    userId: user?.id,
    userData: user,
    initData: webApp.initData?.substring(0, 200) + '...',
    initDataUnsafe: webApp.initDataUnsafe
  });
  
  // –ï—Å–ª–∏ ID –µ—Å—Ç—å –≤ WebApp
  if (user?.id) {
    console.log('‚úÖ ID –ø–æ–ª—É—á–µ–Ω –∏–∑ WebApp:', user.id);
    return user.id;
  }
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ initData
  if (webApp.initData) {
    try {
      const initDataParams = new URLSearchParams(webApp.initData);
      const userParam = initDataParams.get('user');
      
      if (userParam) {
        const userData = JSON.parse(decodeURIComponent(userParam));
        console.log('‚úÖ ID –ø–æ–ª—É—á–µ–Ω –∏–∑ initData:', userData.id);
        return userData.id;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData –¥–ª—è ID:', error);
    }
  }
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ URL hash
  try {
    const url = window.location.href;
    if (url.includes('tgWebAppData=')) {
      const urlParams = new URLSearchParams(window.location.hash.substring(1));
      const tgWebAppData = urlParams.get('tgWebAppData');
      
      if (tgWebAppData) {
        console.log('üîç –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ URL –¥–ª—è ID:', tgWebAppData);
        
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL
        const decodedData = decodeURIComponent(tgWebAppData);
        const dataParams = new URLSearchParams(decodedData);
        const userParam = dataParams.get('user');
        
        if (userParam) {
          const userData = JSON.parse(userParam);
          console.log('‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ tgWebAppData:', userData.id);
          return userData.id;
        }
      }
    }
  } catch (error) {
    console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ URL –¥–ª—è ID:', error);
  }
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  try {
    const url = window.location.href;
    
    // –í–∞—Ä–∏–∞–Ω—Ç 1: tgWebAppData –≤ hash
    if (url.includes('tgWebAppData=')) {
      const urlParams = new URLSearchParams(window.location.hash.substring(1));
      const tgWebAppData = urlParams.get('tgWebAppData');
      
      if (tgWebAppData) {
        console.log('üîç –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ URL –¥–ª—è ID:', tgWebAppData);
        
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL
        const decodedData = decodeURIComponent(tgWebAppData);
        const dataParams = new URLSearchParams(decodedData);
        const userParam = dataParams.get('user');
        
        if (userParam) {
          const userData = JSON.parse(userParam);
          console.log('‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ tgWebAppData:', userData.id);
          return userData.id;
        }
      }
    }
    
    // –í–∞—Ä–∏–∞–Ω—Ç 2: user –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ URL
    const urlParams = new URLSearchParams(window.location.search);
    const userParam = urlParams.get('user');
    
    if (userParam) {
      try {
        const userData = JSON.parse(decodeURIComponent(userParam));
        console.log('‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:', userData.id);
        return userData.id;
      } catch (e) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å user –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è ID');
      }
    }
    
    // –í–∞—Ä–∏–∞–Ω—Ç 3: –ü–∞—Ä—Å–∏–º –∏–∑ –ø–æ–ª–Ω–æ–≥–æ URL
    const userMatch = url.match(/user%3D([^%&]+)/);
    if (userMatch) {
      try {
        const userData = JSON.parse(decodeURIComponent(userMatch[1]));
        console.log('‚úÖ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL regex:', userData.id);
        return userData.id;
      } catch (e) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ID –∏–∑ URL regex');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ ID –∏–∑ URL:', error);
  }
  
  return null;
};

// –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram
export const getTelegramUser = () => {
  if (!isTelegramWebApp()) return null;
  
  const webApp = (window as any).Telegram.WebApp;
  const user = webApp.initDataUnsafe?.user;
  
  console.log('üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', {
    hasWebApp: !!webApp,
    hasInitDataUnsafe: !!webApp.initDataUnsafe,
    hasUser: !!user,
    user: user,
    initDataLength: webApp.initData?.length || 0,
    initDataPreview: webApp.initData?.substring(0, 200) + '...'
  });
  
  // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –≤ WebApp
  if (user) {
    console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ WebApp:', user);
    return user;
  }
  
  // –ü–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ initData
  if (webApp.initData) {
    try {
      const initDataParams = new URLSearchParams(webApp.initData);
      const userParam = initDataParams.get('user');
      
      if (userParam) {
        const userData = JSON.parse(decodeURIComponent(userParam));
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ initData:', userData);
        return userData;
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }
  
  // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–∑ URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const url = window.location.href;
    console.log('üîó –ê–Ω–∞–ª–∏–∑ URL:', url);
    
    // –í–∞—Ä–∏–∞–Ω—Ç 1: tgWebAppData –≤ hash
    if (url.includes('tgWebAppData=')) {
      const urlParams = new URLSearchParams(window.location.hash.substring(1));
      const tgWebAppData = urlParams.get('tgWebAppData');
      
      if (tgWebAppData) {
        console.log('üîç –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ tgWebAppData:', tgWebAppData);
        
        // –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ URL
        const decodedData = decodeURIComponent(tgWebAppData);
        const dataParams = new URLSearchParams(decodedData);
        const userParam = dataParams.get('user');
        
        if (userParam) {
          const userData = JSON.parse(userParam);
          console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ tgWebAppData:', userData);
          return userData;
        }
      }
    }
    
    // –í–∞—Ä–∏–∞–Ω—Ç 2: user –ø–∞—Ä–∞–º–µ—Ç—Ä –≤ URL
    const urlParams = new URLSearchParams(window.location.search);
    const userParam = urlParams.get('user');
    
    if (userParam) {
      try {
        const userData = JSON.parse(decodeURIComponent(userParam));
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ user –ø–∞—Ä–∞–º–µ—Ç—Ä–∞:', userData);
        return userData;
      } catch (e) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å user –ø–∞—Ä–∞–º–µ—Ç—Ä:', userParam);
      }
    }
    
    // –í–∞—Ä–∏–∞–Ω—Ç 3: –ü–∞—Ä—Å–∏–º –∏–∑ –ø–æ–ª–Ω–æ–≥–æ URL
    const userMatch = url.match(/user%3D([^%&]+)/);
    if (userMatch) {
      try {
        const userData = JSON.parse(decodeURIComponent(userMatch[1]));
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ URL regex:', userData);
        return userData;
      } catch (e) {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ URL regex');
      }
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ URL:', error);
  }
  
  return null;
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram Web App
export const initTelegramWebApp = (): void => {
  if (!isTelegramWebApp()) {
    console.log('Telegram Web App –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏');
    return;
  }
  
  const webApp = (window as any).Telegram.WebApp;
  
  try {
    webApp.ready();
    webApp.expand();
    console.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Telegram Web App:', error);
  }
};

// –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—É—Å–∫–∞
export const getStartParam = (): string => {
  if (!isTelegramWebApp()) return '';
  
  const webApp = (window as any).Telegram.WebApp;
  return webApp.initDataUnsafe?.start_param || '';
};

// –°–æ–∑–¥–∞–µ–º URL –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ Telegram –±–æ—Ç
export const createTelegramBotUrl = (command: string = '/start'): string => {
  const botUsername = 'todobotuz_bot'; // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π username –±–æ—Ç–∞
  return `https://t.me/${botUsername}?start=${command}`;
};

// –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram –±–æ—Ç
export const redirectToTelegramBot = (command: string = '/start'): void => {
  const url = createTelegramBotUrl(command);
  window.open(url, '_blank');
}; 