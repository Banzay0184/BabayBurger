import axios from 'axios';
import type { ApiResponse, ApiError } from './types';
import { API_CONFIG } from '../config/api';

const apiClient = axios.create({
  baseURL: API_CONFIG.BASE_URL,
  timeout: API_CONFIG.TIMEOUT,
  headers: {
    'Content-Type': 'application/json',
  },
  // –û—Ç–∫–ª—é—á–∞–µ–º withCredentials –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
  withCredentials: false, // –í—Å–µ–≥–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ–º –¥–ª—è ngrok
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è CSRF —Ç–æ–∫–µ–Ω–∞
const getCSRFToken = (): string | null => {
  // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ cookie
  const cookies = document.cookie.split(';');
  for (const cookie of cookies) {
    const [name, value] = cookie.trim().split('=');
    if (name === 'csrftoken') {
      return value;
    }
  }
  return null;
};

apiClient.interceptors.request.use(
  (config: any) => {
    console.log('üåê API –∑–∞–ø—Ä–æ—Å:', {
      method: config.method?.toUpperCase(),
      url: config.url,
      baseURL: config.baseURL,
      fullURL: `${config.baseURL}${config.url}`,
      headers: config.headers
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º CSRF —Ç–æ–∫–µ–Ω —Ç–æ–ª—å–∫–æ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ withCredentials –≤–∫–ª—é—á–µ–Ω
    if (API_CONFIG.ENV.isDevelopment && config.withCredentials) {
      const csrfToken = getCSRFToken();
      if (csrfToken) {
        config.headers['X-CSRFToken'] = csrfToken;
      }
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const token = localStorage.getItem('auth_token');
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è ngrok
    if (!API_CONFIG.ENV.isDevelopment) {
      config.headers['ngrok-skip-browser-warning'] = 'true';
      config.headers['X-Requested-With'] = 'XMLHttpRequest';
    }
    
    return config;
  },
  (error: any) => {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    return Promise.reject(error);
  }
);

apiClient.interceptors.response.use(
  (response: any) => {
    console.log('‚úÖ API –æ—Ç–≤–µ—Ç:', {
      status: response.status,
      url: response.config.url,
      data: response.data
    });
    return response;
  },
  (error: any) => {
    console.error('‚ùå API –æ—à–∏–±–∫–∞:', {
      message: error.message,
      status: error.response?.status,
      url: error.config?.url,
      data: error.response?.data
    });

    if (!error.response) {
      console.error('üåê Network error:', error.message);
      console.error('üåê Request details:', {
        url: error.config?.url,
        baseURL: API_CONFIG.BASE_URL,
        method: error.config?.method,
        headers: error.config?.headers
      });
      return Promise.reject({
        message: '–û—à–∏–±–∫–∞ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.',
        code: 'NETWORK_ERROR',
        details: {
          originalError: error.message,
          url: error.config?.url,
          baseURL: API_CONFIG.BASE_URL
        }
      });
    }

    const status = error.response.status;
    let message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞';

    switch (status) {
      case 400: 
        message = '–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å'; 
        console.error('400 Bad Request:', error.response.data);
        break;
      case 401: 
        message = '–ù–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è'; 
        localStorage.removeItem('auth_token'); 
        console.error('401 Unauthorized:', error.response.data);
        break;
      case 403: 
        message = '–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω'; 
        console.error('403 Forbidden:', error.response.data);
        // –ï—Å–ª–∏ CSRF –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
        if (error.response.data?.detail?.includes('CSRF')) {
          console.warn('CSRF —Ç–æ–∫–µ–Ω –∏—Å—Ç–µ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É');
          message = '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É.';
        }
        break;
      case 404: 
        message = '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω'; 
        console.error('404 Not Found:', error.response.data);
        break;
      case 500: 
        message = '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'; 
        console.error('500 Server Error:', error.response.data);
        break;
      default: 
        message = `–û—à–∏–±–∫–∞ ${status}`;
        console.error(`${status} Error:`, error.response.data);
    }

    const apiError: ApiError = {
      message,
      code: status.toString(),
      details: error.response.data
    };

    return Promise.reject(apiError);
  }
);

export const apiUtils = {
  handleSuccess: <T>(response: any): T => {
    return response.data;
  },
  handleError: (error: any): ApiError => {
    if (error.message) {
      return error;
    }
    return { message: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞', code: 'UNKNOWN_ERROR' };
  },
  createApiResponse: <T>(data?: T, error?: ApiError): ApiResponse<T> => {
    return { data, error, success: !error };
  }
};

export default apiClient; 