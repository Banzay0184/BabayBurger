import apiClient from './client';
import axios from 'axios';
import type { User } from './types';
import { API_CONFIG } from '../config/api';

// –¢–∏–ø –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
interface TelegramWidgetUser {
  id: number;
  first_name: string;
  last_name?: string;
  username?: string;
  language_code?: string;
  is_premium?: boolean;
  auth_date: number;
  hash?: string;
  photo_url?: string;
  allows_write_to_pm?: boolean;
}

// –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram (–±–µ–∑ CSRF)
const telegramAuthClient = axios.create({
  baseURL: API_CONFIG.BASE_URL,
  timeout: API_CONFIG.TIMEOUT,
  headers: {
    'Content-Type': 'application/json',
    'ngrok-skip-browser-warning': 'true', // –î–ª—è –æ–±—Ö–æ–¥–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π ngrok
  },
  withCredentials: false, // –û—Ç–∫–ª—é—á–∞–µ–º CSRF –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
});

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API
export const testApiConnection = async () => {
  try {
    console.log('–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API...');
    const response = await apiClient.get('auth/test/');
    console.log('API –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ Telegram Widget
export const telegramAuth = async (userData: TelegramWidgetUser) => {
  try {
    console.log('=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò ===');
    console.log('–ò—Å—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userData);
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    const authData = {
      telegram_id: userData.id, // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –±—ç–∫–µ–Ω–¥–æ–º
      id: userData.id, // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º id –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
      first_name: userData.first_name,
      last_name: userData.last_name || '',
      username: userData.username || '',
      language_code: userData.language_code || 'ru',
      is_premium: userData.is_premium || false,
      auth_date: userData.auth_date,
      hash: userData.hash || '',
      photo_url: userData.photo_url || '',
      allows_write_to_pm: userData.allows_write_to_pm || false
    };
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL
    const authUrl = 'auth/telegram-widget/';
    const fullUrl = `${API_CONFIG.BASE_URL}${authUrl}`;
    
    console.log('üì§ –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:', authData);
    console.log('üåê URL –∑–∞–ø—Ä–æ—Å–∞:', authUrl);
    console.log('üîó –ü–æ–ª–Ω—ã–π URL:', fullUrl);
    console.log('üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API:', {
      BASE_URL: API_CONFIG.BASE_URL,
      isDevelopment: API_CONFIG.ENV.isDevelopment,
      isProduction: API_CONFIG.ENV.isProduction
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º JSON –∑–∞–ø—Ä–æ—Å
    const response = await telegramAuthClient.post(authUrl, authData, {
      headers: {
        'Content-Type': 'application/json',
        'ngrok-skip-browser-warning': 'true',
      },
    });
    
    console.log('‚úÖ –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.data);
    return response.data;
  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram:', error);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ CORS –æ—à–∏–±–∫—É
    if (error.message?.includes('CORS') || error.message?.includes('blocked')) {
      console.error('üö´ CORS –æ—à–∏–±–∫–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞');
      throw {
        message: '–û—à–∏–±–∫–∞ CORS. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞ –∏ URL.',
        code: 'CORS_ERROR',
        details: {
          originalError: error.message,
          url: `${API_CONFIG.BASE_URL}auth/telegram-widget/`,
          suggestion: '–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ HTTPS'
        }
      };
    }
    
    // –ï—Å–ª–∏ JSON –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º FormData
    if (error.response?.status === 400) {
      console.log('üîÑ –ü—Ä–æ–±—É–µ–º FormData —Ñ–æ—Ä–º–∞—Ç...');
      
      try {
        const formData = new URLSearchParams();
        
        // –û—Å–Ω–æ–≤–Ω—ã–µ –ø–æ–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        formData.append('telegram_id', String(userData.id)); // –ò—Å–ø–æ–ª—å–∑—É–µ–º telegram_id –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        formData.append('id', String(userData.id)); // –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º id –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏
        formData.append('first_name', userData.first_name);
        if (userData.last_name) {
          formData.append('last_name', userData.last_name);
        }
        if (userData.username) {
          formData.append('username', userData.username);
        }
        formData.append('language_code', userData.language_code || 'ru');
        formData.append('is_premium', String(userData.is_premium || false));
        
        // –ü–æ–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        formData.append('auth_date', String(userData.auth_date));
        if (userData.hash) {
          formData.append('hash', userData.hash);
        }
        if (userData.photo_url) {
          formData.append('photo_url', userData.photo_url);
        }
        formData.append('allows_write_to_pm', String(userData.allows_write_to_pm || false));
        
        console.log('üì§ FormData –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏:');
        for (const [key, value] of formData.entries()) {
          console.log(`${key}: ${value}`);
        }
        
        const formResponse = await telegramAuthClient.post('auth/telegram-widget/', formData, {
          headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            'ngrok-skip-browser-warning': 'true',
          },
        });
        
        console.log('‚úÖ –û—Ç–≤–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (FormData):', formResponse.data);
        return formResponse.data;
      } catch (formError: any) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ Telegram (FormData):', formError);
        
        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        if (formError.response?.status === 400) {
          console.error('400 Bad Request - –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', formError.response.data);
          console.error('–ó–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞:', formError.response.headers);
          console.error('–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', formError.response.status);
          throw {
            message: '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞.',
            code: 'BAD_REQUEST',
            details: formError.response.data
          };
        }
        
        throw formError;
      }
    }
    
    if (error.response?.status === 403) {
      console.error('403 Forbidden - –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error.response.data);
      throw {
        message: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞.',
        code: 'AUTH_ERROR',
        details: error.response.data
      };
    }
    
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
export const checkAuthStatus = async () => {
  try {
    const response = await apiClient.get('auth/status/');
    return response.data;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞:', error);
    throw error;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞
export const logout = async () => {
  try {
    const response = await apiClient.post('auth/logout/');
    localStorage.removeItem('auth_token');
    return response.data;
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
    localStorage.removeItem('auth_token');
    throw error;
  }
};

export const authApi = {
  async getCurrentUser(): Promise<User> {
    try {
      const response = await apiClient.get('auth/user/');
      return response.data;
    } catch (error: any) {
      throw { message: error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', code: error.code || 'USER_ERROR' };
    }
  },

  async validateToken(): Promise<boolean> {
    try {
      const response = await apiClient.get('auth/validate/');
      return response.data.valid;
    } catch (error: any) {
      return false;
    }
  },

  // –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
  async telegramAuth(authData: any): Promise<any> {
    return telegramAuth(authData);
  },

  async telegramWidgetAuth(widgetData: any): Promise<any> {
    return telegramAuth(widgetData);
  },

  async logout(): Promise<void> {
    return logout();
  }
}; 